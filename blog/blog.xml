<?xml version="1.0" encoding="UTF-8"?>
<!--
 This is a WordPress eXtended RSS file generated by WordPress as an export of your site.
 It contains information about your site's posts, pages, comments, categories, and other content.
 You may use this file to transfer that content from one site to another.
 This file is not intended to serve as a complete backup of your site.

 To import this information into a WordPress site follow these steps:
 1. Log in to that site as an administrator.
 2. Go to Tools: Import in the WordPress admin panel.
 3. Install the "WordPress" importer from the list.
 4. Activate & Run Importer.
 5. Upload this file using the form provided on that page.
 6. You will first be asked to map the authors in this export file to users
    on the site. For each author, you may choose to map to an
    existing user on the site or to create a new user.
 7. WordPress will then import each of the posts, pages, comments, categories, etc.
    contained in this file into your site.
-->
<!-- generator="WordPress.com" created="2014-03-12 16:26"-->
<rss version="2.0" xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:wp="http://wordpress.org/export/1.2/">
  <channel>
<title>The World of Software Development</title>
<link>http://intertherabbithole.wordpress.com</link>
<description>see how far the rabbit hole goes</description>
<pubDate>Wed, 12 Mar 2014 16:26:38 +0000</pubDate>
<language>en</language>
<wp:wxr_version>1.2</wp:wxr_version>
<wp:base_site_url>http://wordpress.com/</wp:base_site_url>
<wp:base_blog_url>http://intertherabbithole.wordpress.com</wp:base_blog_url>
<wp:wp_author>
  <wp:author_login>adeiji</wp:author_login>
  <wp:author_email>adeiji@yahoo.com</wp:author_email>
  <wp:author_display_name><![CDATA[adeiji]]></wp:author_display_name>
  <wp:author_first_name><![CDATA[]]></wp:author_first_name>
  <wp:author_last_name><![CDATA[]]></wp:author_last_name>
</wp:wp_author>
<wp:category>
  <wp:term_id>2426</wp:term_id>
  <wp:category_nicename>c</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[C#]]></wp:cat_name>
  <wp:category_description><![CDATA[Object Oriented Programming with emphasis in C#]]></wp:category_description>
</wp:category>
<wp:category>
  <wp:term_id>35078870</wp:term_id>
  <wp:category_nicename>objective-c-2</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Objective-C]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>1</wp:term_id>
  <wp:category_nicename>uncategorized</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>2260</wp:term_id>
  <wp:category_nicename>web-development</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Web Development]]></wp:cat_name>
</wp:category>
<wp:tag>
  <wp:term_id>599334</wp:term_id>
  <wp:tag_slug>amazon-ec2</wp:tag_slug>
  <wp:tag_name><![CDATA[amazon ec2]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>641922</wp:term_id>
  <wp:tag_slug>android</wp:tag_slug>
  <wp:tag_name><![CDATA[Android]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>232047</wp:term_id>
  <wp:tag_slug>app</wp:tag_slug>
  <wp:tag_name><![CDATA[app]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>5247686</wp:term_id>
  <wp:tag_slug>app-store</wp:tag_slug>
  <wp:tag_name><![CDATA[app store]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>4213</wp:term_id>
  <wp:tag_slug>apps</wp:tag_slug>
  <wp:tag_name><![CDATA[apps]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>247477</wp:term_id>
  <wp:tag_slug>atomic</wp:tag_slug>
  <wp:tag_name><![CDATA[atomic]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>679098</wp:term_id>
  <wp:tag_slug>balancing</wp:tag_slug>
  <wp:tag_name><![CDATA[balancing]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>63485</wp:term_id>
  <wp:tag_slug>beautiful</wp:tag_slug>
  <wp:tag_name><![CDATA[beautiful]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>69884814</wp:term_id>
  <wp:tag_slug>beautiful-apps</wp:tag_slug>
  <wp:tag_name><![CDATA[beautiful apps]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>179</wp:term_id>
  <wp:tag_slug>business</wp:tag_slug>
  <wp:tag_name><![CDATA[business]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>53875</wp:term_id>
  <wp:tag_slug>client-side</wp:tag_slug>
  <wp:tag_name><![CDATA[client-side]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>33927</wp:term_id>
  <wp:tag_slug>command-line</wp:tag_slug>
  <wp:tag_name><![CDATA[command line]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>166866</wp:term_id>
  <wp:tag_slug>contract</wp:tag_slug>
  <wp:tag_name><![CDATA[contract]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>709297</wp:term_id>
  <wp:tag_slug>contract-work</wp:tag_slug>
  <wp:tag_name><![CDATA[contract work]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>475</wp:term_id>
  <wp:tag_slug>database</wp:tag_slug>
  <wp:tag_name><![CDATA[database]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>2846966</wp:term_id>
  <wp:tag_slug>datatables</wp:tag_slug>
  <wp:tag_name><![CDATA[datatables]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>148</wp:term_id>
  <wp:tag_slug>design</wp:tag_slug>
  <wp:tag_name><![CDATA[design]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>20054</wp:term_id>
  <wp:tag_slug>developers</wp:tag_slug>
  <wp:tag_name><![CDATA[developers]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>780</wp:term_id>
  <wp:tag_slug>development</wp:tag_slug>
  <wp:tag_name><![CDATA[development]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>130078</wp:term_id>
  <wp:tag_slug>diligence</wp:tag_slug>
  <wp:tag_name><![CDATA[diligence]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>5734201</wp:term_id>
  <wp:tag_slug>easy-tutorial</wp:tag_slug>
  <wp:tag_name><![CDATA[easy tutorial]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>315451</wp:term_id>
  <wp:tag_slug>ec2</wp:tag_slug>
  <wp:tag_name><![CDATA[ec2]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>212088485</wp:term_id>
  <wp:tag_slug>ec2-management-console</wp:tag_slug>
  <wp:tag_name><![CDATA[ec2 management console]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>79993</wp:term_id>
  <wp:tag_slug>elegance</wp:tag_slug>
  <wp:tag_name><![CDATA[elegance]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>499704</wp:term_id>
  <wp:tag_slug>elegant</wp:tag_slug>
  <wp:tag_name><![CDATA[elegant]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>134195168</wp:term_id>
  <wp:tag_slug>elevatr</wp:tag_slug>
  <wp:tag_name><![CDATA[elevatr]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>111698137</wp:term_id>
  <wp:tag_slug>fueled-com</wp:tag_slug>
  <wp:tag_name><![CDATA[Fueled.com]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>203917132</wp:term_id>
  <wp:tag_slug>getter-and-setter-methods</wp:tag_slug>
  <wp:tag_name><![CDATA[getter and setter methods]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>147009</wp:term_id>
  <wp:tag_slug>hard-work</wp:tag_slug>
  <wp:tag_name><![CDATA[hard work]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>7544</wp:term_id>
  <wp:tag_slug>help</wp:tag_slug>
  <wp:tag_name><![CDATA[help]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>2708</wp:term_id>
  <wp:tag_slug>how-to</wp:tag_slug>
  <wp:tag_name><![CDATA[how to]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>647</wp:term_id>
  <wp:tag_slug>html</wp:tag_slug>
  <wp:tag_name><![CDATA[html]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>324281</wp:term_id>
  <wp:tag_slug>ios</wp:tag_slug>
  <wp:tag_name><![CDATA[ios]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>580102</wp:term_id>
  <wp:tag_slug>ipad</wp:tag_slug>
  <wp:tag_name><![CDATA[ipad]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>106595</wp:term_id>
  <wp:tag_slug>iphone</wp:tag_slug>
  <wp:tag_name><![CDATA[iphone]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>457</wp:term_id>
  <wp:tag_slug>javascript</wp:tag_slug>
  <wp:tag_name><![CDATA[javascript]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>203308</wp:term_id>
  <wp:tag_slug>jquery</wp:tag_slug>
  <wp:tag_name><![CDATA[jquery]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>72721</wp:term_id>
  <wp:tag_slug>json</wp:tag_slug>
  <wp:tag_name><![CDATA[json]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>4933</wp:term_id>
  <wp:tag_slug>learn</wp:tag_slug>
  <wp:tag_name><![CDATA[learn]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>610</wp:term_id>
  <wp:tag_slug>linux</wp:tag_slug>
  <wp:tag_name><![CDATA[linux]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>120</wp:term_id>
  <wp:tag_slug>mobile</wp:tag_slug>
  <wp:tag_name><![CDATA[mobile]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>93954</wp:term_id>
  <wp:tag_slug>mobile-development</wp:tag_slug>
  <wp:tag_name><![CDATA[mobile development]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>195979</wp:term_id>
  <wp:tag_slug>mock-ups</wp:tag_slug>
  <wp:tag_name><![CDATA[mock ups]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>551126</wp:term_id>
  <wp:tag_slug>mongo</wp:tag_slug>
  <wp:tag_name><![CDATA[mongo]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>21954763</wp:term_id>
  <wp:tag_slug>mongodb</wp:tag_slug>
  <wp:tag_name><![CDATA[mongodb]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1540721</wp:term_id>
  <wp:tag_slug>mongoose</wp:tag_slug>
  <wp:tag_name><![CDATA[mongoose]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>209735246</wp:term_id>
  <wp:tag_slug>mongoose-datatables</wp:tag_slug>
  <wp:tag_name><![CDATA[mongoose-datatables]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>89198451</wp:term_id>
  <wp:tag_slug>multithreaded-application</wp:tag_slug>
  <wp:tag_name><![CDATA[multithreaded application]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1211379</wp:term_id>
  <wp:tag_slug>node</wp:tag_slug>
  <wp:tag_name><![CDATA[node]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>31896918</wp:term_id>
  <wp:tag_slug>nodejs</wp:tag_slug>
  <wp:tag_name><![CDATA[nodejs]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>24993165</wp:term_id>
  <wp:tag_slug>nonatomic</wp:tag_slug>
  <wp:tag_name><![CDATA[nonatomic]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>20106</wp:term_id>
  <wp:tag_slug>object-oriented-programming</wp:tag_slug>
  <wp:tag_name><![CDATA[Object Oriented Programming]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>12117</wp:term_id>
  <wp:tag_slug>objective-c</wp:tag_slug>
  <wp:tag_name><![CDATA[objective-c]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>36592502</wp:term_id>
  <wp:tag_slug>pinterest</wp:tag_slug>
  <wp:tag_name><![CDATA[pinterest]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>4599</wp:term_id>
  <wp:tag_slug>planning</wp:tag_slug>
  <wp:tag_name><![CDATA[planning]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>2704</wp:term_id>
  <wp:tag_slug>productivity</wp:tag_slug>
  <wp:tag_name><![CDATA[productivity]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>196</wp:term_id>
  <wp:tag_slug>programming</wp:tag_slug>
  <wp:tag_name><![CDATA[programming]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>238390</wp:term_id>
  <wp:tag_slug>ready</wp:tag_slug>
  <wp:tag_name><![CDATA[ready]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>118870</wp:term_id>
  <wp:tag_slug>remote</wp:tag_slug>
  <wp:tag_name><![CDATA[remote]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>133339</wp:term_id>
  <wp:tag_slug>s3</wp:tag_slug>
  <wp:tag_name><![CDATA[s3]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>189576</wp:term_id>
  <wp:tag_slug>self-employed</wp:tag_slug>
  <wp:tag_name><![CDATA[self-employed]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>18568</wp:term_id>
  <wp:tag_slug>server</wp:tag_slug>
  <wp:tag_name><![CDATA[server]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>445979</wp:term_id>
  <wp:tag_slug>server-side</wp:tag_slug>
  <wp:tag_name><![CDATA[server-side]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>14609</wp:term_id>
  <wp:tag_slug>simple</wp:tag_slug>
  <wp:tag_name><![CDATA[simple]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>209034224</wp:term_id>
  <wp:tag_slug>simple-daily-todo-list</wp:tag_slug>
  <wp:tag_name><![CDATA[simple daily todo list]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>2765758</wp:term_id>
  <wp:tag_slug>simple-tasks</wp:tag_slug>
  <wp:tag_name><![CDATA[simple tasks]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>17266</wp:term_id>
  <wp:tag_slug>simplicity</wp:tag_slug>
  <wp:tag_name><![CDATA[simplicity]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>581</wp:term_id>
  <wp:tag_slug>software</wp:tag_slug>
  <wp:tag_name><![CDATA[software]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>2301</wp:term_id>
  <wp:tag_slug>software-development</wp:tag_slug>
  <wp:tag_name><![CDATA[software development]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>4668</wp:term_id>
  <wp:tag_slug>success</wp:tag_slug>
  <wp:tag_name><![CDATA[success]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1788</wp:term_id>
  <wp:tag_slug>tips</wp:tag_slug>
  <wp:tag_name><![CDATA[tips]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>2932</wp:term_id>
  <wp:tag_slug>tutorial</wp:tag_slug>
  <wp:tag_name><![CDATA[tutorial]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>325600</wp:term_id>
  <wp:tag_slug>tuts</wp:tag_slug>
  <wp:tag_name><![CDATA[tuts]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>27940</wp:term_id>
  <wp:tag_slug>ui</wp:tag_slug>
  <wp:tag_name><![CDATA[UI]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>6171</wp:term_id>
  <wp:tag_slug>user-interface</wp:tag_slug>
  <wp:tag_name><![CDATA[user interface]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>5497</wp:term_id>
  <wp:tag_slug>web-browser</wp:tag_slug>
  <wp:tag_name><![CDATA[web browser]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>25796062</wp:term_id>
  <wp:tag_slug>web-development-2</wp:tag_slug>
  <wp:tag_name><![CDATA[web development]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>131</wp:term_id>
  <wp:tag_slug>work</wp:tag_slug>
  <wp:tag_name><![CDATA[work]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>7922045</wp:term_id>
  <wp:tag_slug>yahoo-weather</wp:tag_slug>
  <wp:tag_name><![CDATA[yahoo weather]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>6589661</wp:term_id>
  <wp:tag_slug>yum-install</wp:tag_slug>
  <wp:tag_name><![CDATA[yum install]]></wp:tag_name>
</wp:tag>
<wp:term>
  <wp:term_id>20606</wp:term_id>
  <wp:term_taxonomy>nav_menu</wp:term_taxonomy>
  <wp:term_slug>main-menu</wp:term_slug>
  <wp:term_name><![CDATA[Main Menu]]></wp:term_name>
</wp:term>
<generator>http://wordpress.com/</generator>
<image>
		<url>http://s2.wp.com/i/buttonw-com.png</url>
		<title>The World of Software Development</title>
		<link>http://intertherabbithole.wordpress.com</link>
	</image>
	<item>
  <title>mapObjects</title>
  <link>http://intertherabbithole.wordpress.com/?attachment_id=4</link>
  <pubDate>Sat, 23 Nov 2013 00:21:13 +0000</pubDate>
  <dc:creator>adeiji</dc:creator>
  <guid isPermaLink="false">http://intertherabbithole.files.wordpress.com/2013/11/mapobjects.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4</wp:post_id>
  <wp:post_date>2013-11-23 00:21:13</wp:post_date>
  <wp:post_date_gmt>2013-11-23 00:21:13</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>mapobjects</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://intertherabbithole.files.wordpress.com/2013/11/mapobjects.png</wp:attachment_url>
</item>
<item>
  <title>mapObjects</title>
  <link>http://intertherabbithole.wordpress.com/?attachment_id=12</link>
  <pubDate>Sat, 23 Nov 2013 00:33:30 +0000</pubDate>
  <dc:creator>adeiji</dc:creator>
  <guid isPermaLink="false">http://intertherabbithole.files.wordpress.com/2013/11/mapobjects1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>12</wp:post_id>
  <wp:post_date>2013-11-23 00:33:30</wp:post_date>
  <wp:post_date_gmt>2013-11-23 00:33:30</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>mapobjects-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://intertherabbithole.files.wordpress.com/2013/11/mapobjects1.png</wp:attachment_url>
</item>
<item>
  <title>When is the App is Ready?</title>
  <link>http://intertherabbithole.wordpress.com/2014/03/07/when-is-the-app-is-ready/</link>
  <pubDate>Fri, 07 Mar 2014 15:13:46 +0000</pubDate>
  <dc:creator>adeiji</dc:creator>
  <guid isPermaLink="false">http://intertherabbithole.wordpress.com/?p=19</guid>
  <description/>
  <content:encoded><![CDATA[When working with clients, and working for yourself, it can be very tough to know when the app is ready to be put on the app store. Why is that? Well as Fueled.com puts it,
<blockquote>"Building an app is a little like raising a child: first you bring it into the world, and then you help it take its first steps, watch as it learns to talk, and revel in parental pride at every little milestone along the way. It’s a great feeling. But then that scary moment arrives when it’s time for them to leave for school."</blockquote>
And this is where it gets tough. You love the app, but the last thing you want to happen is for the app to go to school, aka the App Store, and fail miserably. So what do you do? Do you wait forever, making sure that every little detail is perfected to the highest levels of awesomeness. That can be easy to do, but often times not the wisest decision. Put simply here's what you should keep in mind when deciding when the app is ready.

1. <strong>A beautiful app is a process</strong>. The likelihood of you getting it right the first shot is slim to none. Instead of wasting your time spending hours tweaking every small non-essential detail, why not get a good looking product that functions as it's supposed, then put it on the app store.  Then you can add features, and enhance it later.  If you do this it will help you too...

2. <strong>Test the waters out</strong> - See if first of all, anyone even wants an app like this. That's the greatest advantage of putting the app on the app store early. As you see what people are saying and their view of your app, it will allow you to make tweaks as you go. (Just make sure people know that the initial release is the beta version.)  By doing this you can answer the question...

3. <strong>Should I even be doing this?</strong> - There is a possibility that the app you're working on is not really needed, nor wanted. It would be horrible to find that out after 1 1/2 years of working on the app. By following the steps above, you can find this out earlier, and save yourself time and headaches.

Well, I hope this helps some people. Just remember: A beautiful app is a process, test the waters out, and answer the question early, "Should I even be doing this?"

Most of this post came from <a href="http://fueled.com/">Fueled.com</a>, which is an awesome Mobile Development company, check out their blog post!

<a href="http://fueled.com/blog/how-to-know-when-your-app-is-ready/">http://fueled.com/blog/how-to-know-when-your-app-is-ready/</a>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>19</wp:post_id>
  <wp:post_date>2014-03-07 15:13:46</wp:post_date>
  <wp:post_date_gmt>2014-03-07 15:13:46</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>when-is-the-app-is-ready</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="android"><![CDATA[Android]]></category>
  <category domain="post_tag" nicename="app"><![CDATA[app]]></category>
  <category domain="post_tag" nicename="app-store"><![CDATA[app store]]></category>
  <category domain="post_tag" nicename="business"><![CDATA[business]]></category>
  <category domain="post_tag" nicename="development"><![CDATA[development]]></category>
  <category domain="post_tag" nicename="fueled-com"><![CDATA[Fueled.com]]></category>
  <category domain="post_tag" nicename="ios"><![CDATA[ios]]></category>
  <category domain="post_tag" nicename="mobile-development"><![CDATA[mobile development]]></category>
  <category domain="post_tag" nicename="ready"><![CDATA[ready]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>gplus_authorship_disabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/105538181443316889515/posts/WN4p1hs8wDZ]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_5968174</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:11:"google_plus";a:1:{s:21:"105538181443316889515";b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://www.linkedin.com/updates?discuss=&scope=293044799&stype=M&topic=5847720607952670720&type=U&a=RrrZ]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_5968166</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_5968174</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_5968166</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Home</title>
  <link>http://intertherabbithole.wordpress.com/2013/11/23/home/</link>
  <pubDate>Sat, 23 Nov 2013 00:45:15 +0000</pubDate>
  <dc:creator>adeiji</dc:creator>
  <guid isPermaLink="false">http://intertherabbithole.wordpress.com/?p=20</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>20</wp:post_id>
  <wp:post_date>2013-11-23 00:45:15</wp:post_date>
  <wp:post_date_gmt>2013-11-23 00:45:15</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>home</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>1</wp:menu_order>
  <wp:post_type>nav_menu_item</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="nav_menu" nicename="main-menu"><![CDATA[Main Menu]]></category>
  <wp:postmeta>
    <wp:meta_key>_menu_item_type</wp:meta_key>
    <wp:meta_value><![CDATA[custom]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object_id</wp:meta_key>
    <wp:meta_value><![CDATA[20]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object</wp:meta_key>
    <wp:meta_value><![CDATA[custom]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_target</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_classes</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_xfn</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://intertherabbithole.wordpress.com/]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title/>
  <link>http://intertherabbithole.wordpress.com/?p=23</link>
  <pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>adeiji</dc:creator>
  <guid isPermaLink="false">http://intertherabbithole.wordpress.com/?p=23</guid>
  <description/>
  <content:encoded><![CDATA[ ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>23</wp:post_id>
  <wp:post_date>2013-11-23 00:44:43</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>1</wp:menu_order>
  <wp:post_type>nav_menu_item</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_menu_item_type</wp:meta_key>
    <wp:meta_value><![CDATA[post_type]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object_id</wp:meta_key>
    <wp:meta_value><![CDATA[8]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object</wp:meta_key>
    <wp:meta_value><![CDATA[page]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_target</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_classes</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_xfn</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_orphaned</wp:meta_key>
    <wp:meta_value><![CDATA[1385167484]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title/>
  <link>http://intertherabbithole.wordpress.com/?p=24</link>
  <pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>adeiji</dc:creator>
  <guid isPermaLink="false">http://intertherabbithole.wordpress.com/?p=24</guid>
  <description/>
  <content:encoded><![CDATA[ ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>24</wp:post_id>
  <wp:post_date>2013-11-23 00:44:44</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>1</wp:menu_order>
  <wp:post_type>nav_menu_item</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_menu_item_type</wp:meta_key>
    <wp:meta_value><![CDATA[post_type]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object_id</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object</wp:meta_key>
    <wp:meta_value><![CDATA[page]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_target</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_classes</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_xfn</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_orphaned</wp:meta_key>
    <wp:meta_value><![CDATA[1385167484]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Rocking-Chair-mdn</title>
  <link>http://intertherabbithole.wordpress.com/?attachment_id=28</link>
  <pubDate>Mon, 25 Nov 2013 06:15:09 +0000</pubDate>
  <dc:creator>adeiji</dc:creator>
  <guid isPermaLink="false">http://intertherabbithole.files.wordpress.com/2013/11/rocking-chair-mdn.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>28</wp:post_id>
  <wp:post_date>2013-11-25 06:15:09</wp:post_date>
  <wp:post_date_gmt>2013-11-25 06:15:09</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>rocking-chair-mdn</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://intertherabbithole.files.wordpress.com/2013/11/rocking-chair-mdn.jpg</wp:attachment_url>
</item>
<item>
  <title>Atomic vs Nonatomic</title>
  <link>http://intertherabbithole.wordpress.com/2013/12/10/atomic-vs-nonatomic/</link>
  <pubDate>Tue, 10 Dec 2013 17:53:56 +0000</pubDate>
  <dc:creator>adeiji</dc:creator>
  <guid isPermaLink="false">http://intertherabbithole.wordpress.com/?p=35</guid>
  <description/>
  <content:encoded><![CDATA[It's funny how often when a person is learning iOS development they simply write atomic or nonatomic for their properties, though having no idea why.  I have to laugh because I myself did the same thing.

But what is nonatomic, and what's atomic?  What's their differences?  Here's a simple explanation.

Atomic and nonatomic have to do with how to handle multithreaded environments.  With"atomic", the synthesized getter and setter methods will always make sure that you receive a whole value.  So for example, if you're running a multithreaded application and the getter method is called by multiple threads (which should rarely ever happen), if the property is set to atomic, a whole value will be returned, but this value can either be the last value before the setter was called, or the value that is being set by the setter, and there's no way to tell.  This is not thread safe because you can't be sure what value you're going to receive.

Nonatomic is basically the opposite.  Nonatomic doesn't care whether or not the setter is being called while another thread is trying to get the value of the property, it simply returns whatever it has, whether the return value will be "whole" or not.  Nonatomic is considerably faster then atomic.

To illustrate, say you have a box that you're putting car parts into, and a man inside the box, puts the car parts together, and then hands them back to you outside the box when he's finished.  Now if say this box was <strong>atomic</strong>, if you put some parts inside the box, but the person inside is not finished putting the parts together, he'll simply give you back <strong>whatever completed part that he has</strong>, but it may not be the completed part that <em>you</em> want.  However, if this box was <strong>nonatomic</strong>, he would return to you whatever he already has inside of the box to you, whether he's finished putting the pieces together or not.  This would work perfectly for you though, if you were the only one putting in car parts, because you could put in the car parts and wait until he's finished, before asking for the completed car part. Make sense?

This is why you mainly use "nonatomic" for your properties, because when you're only using a single thread, the application will not be able to call the getter and the setter method at the same time, therefore, the compiler must wait until the setter has finished setting the property before it can ever call the getter method.

It is of note though that this only applies if you are @synthesizing the method implementations, that is, having the compiler generate the getter and setter methods for you.

In review:

Atomic
<ul>
	<li>Always returns a whole value</li>
	<li>Is not thread safe</li>
</ul>
Nonatomic
<ul>
	<li>Does not always return a whole value</li>
	<li>Is thread safe</li>
	<li>Much faster than atomic</li>
</ul>
If anyone has anything to add, or if I've presented this correctly, feel free to leave a comment.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>35</wp:post_id>
  <wp:post_date>2013-12-10 17:53:56</wp:post_date>
  <wp:post_date_gmt>2013-12-10 17:53:56</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>atomic-vs-nonatomic</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="atomic"><![CDATA[atomic]]></category>
  <category domain="post_tag" nicename="getter-and-setter-methods"><![CDATA[getter and setter methods]]></category>
  <category domain="post_tag" nicename="ios"><![CDATA[ios]]></category>
  <category domain="post_tag" nicename="ipad"><![CDATA[ipad]]></category>
  <category domain="post_tag" nicename="iphone"><![CDATA[iphone]]></category>
  <category domain="post_tag" nicename="multithreaded-application"><![CDATA[multithreaded application]]></category>
  <category domain="post_tag" nicename="nonatomic"><![CDATA[nonatomic]]></category>
  <category domain="post_tag" nicename="objective-c"><![CDATA[objective-c]]></category>
  <category domain="category" nicename="objective-c-2"><![CDATA[Objective-C]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>iOS Apps</title>
  <link>http://intertherabbithole.wordpress.com/ios-apps/</link>
  <pubDate>Tue, 10 Dec 2013 23:06:52 +0000</pubDate>
  <dc:creator>adeiji</dc:creator>
  <guid isPermaLink="false">http://intertherabbithole.wordpress.com/?page_id=41</guid>
  <description/>
  <content:encoded><![CDATA[<h1 style="text-align:center;">Sales Management Calculator</h1>
<p style="text-align:center;"><a href="http://intertherabbithole.files.wordpress.com/2013/12/salescalc1.png"><img class="aligncenter size-full wp-image-74" alt="salescalc(new)" src="http://intertherabbithole.files.wordpress.com/2013/12/salescalc1.png" width="682" height="436" /></a></p>
This Sales Calculator's purpose was to be a calculator application which would compete with the Texas Instruments BA-20 calculator.  It possesses all the normal functionality of calculator with added functions tailor fitted for people in sales.  It uses:
<ul>
	<li>Core Data</li>
	<li>Autolayout</li>
	<li>Built in Xcode 5</li>
</ul>
Involvement:
<ul>
	<li>Design</li>
	<li>Development</li>
	<li>Testing</li>
	<li>Sole Developer</li>
</ul>
<h1 style="text-align:center;">Inspection Application</h1>
<a href="http://intertherabbithole.files.wordpress.com/2013/12/inspection-app-page11.png"><img class="wp-image-49 aligncenter" alt="inspection-app-page1" src="http://intertherabbithole.files.wordpress.com/2013/12/inspection-app-page11.png" width="767" height="440" /></a><a href="http://intertherabbithole.files.wordpress.com/2013/12/inspection-app-page21.png"><img class="wp-image-50 aligncenter" alt="inspection-app-page2" src="http://intertherabbithole.files.wordpress.com/2013/12/inspection-app-page21.png" width="786" height="452" /></a>
<p style="text-align:left;">This application allows a user to inspect any kind of machinery, and insert the inspection results.  It then builds a PDF displaying the results of the inspection.  It uses:</p>

<ul>
	<li>Dropbox Sync API</li>
	<li>Dropbox Datastore API.</li>
	<li>Core Data</li>
	<li>ObjCMongoDb</li>
	<li>Built in Xcode 5</li>
</ul>
Backend
<ul>
	<li>Chef</li>
	<li>MongoDb</li>
	<li>NodeJS</li>
	<li>JQuery</li>
	<li>Amazon EC2</li>
</ul>
Involvement:
<ul>
	<li>Design</li>
	<li>Development</li>
	<li>Testing</li>
	<li>Sole Developer</li>
</ul>
The parts of the machinery that the user inspects are read from a Mongo database which sits on an Amazon EC2 instance.  The parts for the machinery are inserted using a web interface which consumes a NodeJS web server which sits on an EC2 instance.
<h1 style="text-align:center;">Simple Daily ToDo List</h1>
<a href="http://intertherabbithole.files.wordpress.com/2013/12/todolist.png"><img class="aligncenter size-full wp-image-77" alt="todolist" src="http://intertherabbithole.files.wordpress.com/2013/12/todolist.png" width="682" height="436" /></a>

This application offers consumers the ability to very simply create task, and mark them as finished.  This application helps users to ensure that they finish tasks by the end of the day, by displaying items in a different format that were not finished the day they were created.

It uses:
<ul>
	<li>Core Data</li>
	<li>Autolayout</li>
	<li>Built in Xcode 5</li>
</ul>
Involvement:
<ul>
	<li>Design</li>
	<li>Development</li>
	<li>Testing</li>
	<li>Sole Developer</li>
</ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>41</wp:post_id>
  <wp:post_date>2013-12-10 23:06:52</wp:post_date>
  <wp:post_date_gmt>2013-12-10 23:06:52</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>ios-apps</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[default]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>salescalc</title>
  <link>http://intertherabbithole.wordpress.com/ios-apps/salescalc/#main</link>
  <pubDate>Tue, 10 Dec 2013 22:44:41 +0000</pubDate>
  <dc:creator>adeiji</dc:creator>
  <guid isPermaLink="false">http://intertherabbithole.files.wordpress.com/2013/12/salescalc.png</guid>
  <description/>
  <content:encoded><![CDATA[Profit Management Calculator similar to the Texas Instrument BA-20]]></content:encoded>
  <excerpt:encoded><![CDATA[Sales Calculator for iOS]]></excerpt:encoded>
  <wp:post_id>42</wp:post_id>
  <wp:post_date>2013-12-10 22:44:41</wp:post_date>
  <wp:post_date_gmt>2013-12-10 22:44:41</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>salescalc</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>41</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://intertherabbithole.files.wordpress.com/2013/12/salescalc.png</wp:attachment_url>
</item>
<item>
  <title>inspection-app-page1</title>
  <link>http://intertherabbithole.wordpress.com/ios-apps/inspection-app-page1/#main</link>
  <pubDate>Wed, 11 Dec 2013 23:26:28 +0000</pubDate>
  <dc:creator>adeiji</dc:creator>
  <guid isPermaLink="false">http://intertherabbithole.files.wordpress.com/2013/12/inspection-app-page11.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>49</wp:post_id>
  <wp:post_date>2013-12-11 23:26:28</wp:post_date>
  <wp:post_date_gmt>2013-12-11 23:26:28</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>inspection-app-page1</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>41</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://intertherabbithole.files.wordpress.com/2013/12/inspection-app-page11.png</wp:attachment_url>
</item>
<item>
  <title>inspection-app-page2</title>
  <link>http://intertherabbithole.wordpress.com/ios-apps/inspection-app-page2/#main</link>
  <pubDate>Wed, 11 Dec 2013 23:26:54 +0000</pubDate>
  <dc:creator>adeiji</dc:creator>
  <guid isPermaLink="false">http://intertherabbithole.files.wordpress.com/2013/12/inspection-app-page21.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>50</wp:post_id>
  <wp:post_date>2013-12-11 23:26:54</wp:post_date>
  <wp:post_date_gmt>2013-12-11 23:26:54</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>inspection-app-page2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>41</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://intertherabbithole.files.wordpress.com/2013/12/inspection-app-page21.png</wp:attachment_url>
</item>
<item>
  <title>About</title>
  <link>http://intertherabbithole.wordpress.com/about/</link>
  <pubDate>Thu, 12 Dec 2013 00:37:35 +0000</pubDate>
  <dc:creator>adeiji</dc:creator>
  <guid isPermaLink="false">http://intertherabbithole.wordpress.com/?page_id=55</guid>
  <description/>
  <content:encoded><![CDATA[<header>
<h1>Introduction to Enter the Rabbit Hole</h1>
</header>
<div>

I am an iOS developer who has been developing for iOS for approximately two years.  Before that I developed mostly Windows based applications using C#, but currently I am working mainly as an iOS and web developer.

The purpose of this blog is to show some of the cool features of Objective-c, and who how to implement them in an iOS applications.  The topics of these articles will vary from beginner to more advanced topics.

There will be other topics discussed besides just Objective-c and iOS though, so make sure that you stay in tune to the articles.

</div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>55</wp:post_id>
  <wp:post_date>2013-12-12 00:37:35</wp:post_date>
  <wp:post_date_gmt>2013-12-12 00:37:35</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>about</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[default]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>iOS Contract Mindsets to Abhor</title>
  <link>http://intertherabbithole.wordpress.com/ios-contract-mindsets-to-abhor/</link>
  <pubDate>Thu, 12 Dec 2013 20:59:15 +0000</pubDate>
  <dc:creator>adeiji</dc:creator>
  <guid isPermaLink="false">http://intertherabbithole.wordpress.com/?page_id=61</guid>
  <description/>
  <content:encoded><![CDATA[I've been doing contract work for about two years now, and over this span of time, I have discovered some little tidbits of information that I think would be beneficial to anyone who is currently thinking about embarking into the world of contract iOS development, or who is currently involved in it but having difficulties getting the work that they wants.  Mainly what I want to show though, is what mindsets are easy to develop within a developer that need to be quickly suppressed if you are to have any success and joy in contract work.
<h1>Mindset #1 - I'm a Monkey</h1>
<img class="aligncenter" alt="" src="http://mentalskillness.files.wordpress.com/2012/05/monkey_computer.jpg" width="369" height="295" />

I once read on a blog someone say, "If you pay peanuts, you're going to attract monkeys."  What did he mean by that?

When going into contract work, I think one of the most difficult things to decide is how much you're going to pay.  It becomes even harder when you go to a site like Elance, or freelancer.com, and see that some people are charging as little as $10 an hour.  That can make you say to yourself, "Man, people are charging that little.  I can't charge much more than that."  You have to remember though, YOU ARE NOT A MONKEY!!  People who are looking for a developer that charges something like $10 an hour, are willing to pay peanuts, and the only ones who are going to apply for those jobs are monkeys.  You don't want to work for someone who wants a monkey.  That's why you have to completely disregard these other people charging such low amounts, and simply charge what you feel you are worth.

Charging more also makes sure that these people who don't understand all that goes into an application, won't even look at you as a potential prospect, which is a good thing.  You don't want anyone like that even speaking to you about a contract, because if you go through with it, you'll be in misery.  So charge a high enough number that will only attract those who truly understand all that goes into the iOS app development process.

Which leads me to my next mindset to avoid.
<h1>Mindset #2 - I'm not that good of a developer, so I can't charge much</h1>
<img class="aligncenter" alt="" src="http://eftimov.net/images/will-code-for-food.jpg" width="425" height="282" />

It can be easy to feel this way, especially if you are somewhat new to development, or simply new to contract work.  But before you start to sale yourself too short, here's a couple of things to remember.  When it comes to contract work, people are paying for an entire package.  This includes, whether or not you work well with others, your communication skills, and whatever background and experiences that you have to offer.  So, for example, if you're a good communicator, you should remember that about yourself, and your hourly rate should reflect that.  If you finish projects, that should be noted.  Actually, finishing projects is huge.  Many developers out there don't finish contracts and projects, and people get irritated about that, so if you're known for finishing what you start, that should definitely be reflected in your hourly.

Also, realize that as a developer you probably have more skills than you realize.  I remember when I was putting together a resume to submit to some jobs, I had my brother proof read it, and I remember he started telling me to add all these skills that I forgot that I even had.  Skills that I had developed from years of doing personal projects.  So don't forget about these things.  If you built something for your own personal use, or maybe you started an open source project, or contributed to one, realize that these things give you credit as a developer, and you should charge accordingly.

Just as a side note, the average rate for iOS contract development is approximately $100 an hour.  <strong>So do not sale yourself short.</strong>
<h1>Mindset #3 - If I charge too high, people may get frustrated with my work</h1>
<p style="text-align:center;"><img class="aligncenter" alt="" src="http://intertherabbithole.files.wordpress.com/2013/12/cba91-frustration.gif" width="250" height="247" /></p>
I have noticed in my time as a contract developer, that there are some people who are simply always irritated, no matter what you do, and some who simply love everything that you put out, and it has nothing to do with your hourly rate.  Some people are just anal, and others just aren't.  So don't feel like you need to charge less to make people happier with your work.  If your work is good, than a reasonable person will be happy with it, but an unreasonable person won't be happy with anything.  And also, remember, if someone hires you for a lower rate, it isn't because they're okay with getting an inferior product.  If you go to a clothing store and see some shoes on sale for $15, you're happy not because you feel like you're going to get a pair of shoes worth $15, but because you feel that you may have just found some shoes worth $60, but that you only had to pay $15 for.  If the shoes fall apart in a week, you're going to be upset whether they cost $15 or not.  However, if you pay $100 and the shoes last for 10 years, you're going to be happy that they lasted so long, and not care that you had to fork out some extra money.  Same thing with development.  If you put out quality, <strong>reasonable</strong> people will be happy, no matter the price.  But how do you know if someone is truly a reasonable person to work with?
<h1>Mindset #4 - I shouldn't ask too many questions, besides, I'm better than all the other developers</h1>
<img class="aligncenter" alt="" src="http://brianjones.com/wp-content/uploads/2012/11/arrogant1.jpg" width="317" height="300" />

You can find out a lot about a person from just speaking with them.  For example,  say you want to start a contract and the potential customer says to you, "Yeah, all the other developers just couldn't finish this."  These words should ring inside of your head.  "IT'S A TRAP" (General Ackbar) If someone says this, it's probably because this potential customer has some issue.  If they've had ten developers in the past not finish a product, chances are it's because of something on the client's side.  Maybe they don't pay when they're supposed to, maybe they want massive amounts of work done for free.  It could be a number of things.  But find out before you agree to anything.  Ask them why the other developers didn't work?  How many developers have they tried?  Where did they find the developers at?  You can find a lot of information just from some good questions.  Don't feel like the other developers didn't work because they were all subpar, and none of their programming senses we're that attuned to your own.  This is simply pride before a crash.  Chances are, most of them were decent developers but the problem lied with the customer.
<h1>Mindset #5 - The customer wants a set price, so I should just give it to him</h1>
<p style="text-align:center;"><img class="alignnone aligncenter" alt="" src="http://wwwdelivery.superstock.com/WI/223/1538/PreviewComp/SuperStock_1538R-49317.jpg" width="350" height="314" /></p>
Think this way, and you're heading down a world that you do not want to be in.  Customers have billions of ideas, and chances are, they will want you to implement every last one of them, slowly, and painstakingly.  I doesn't matter what they say that they want, the truth is, generally speaking, they're not completely sure until the project starts.  It doesn't matter if they say, "All I want is a hello world app, and I'll pay you $2000 for it."  That may seem awesome, and sometimes, that's all they really want.  But other times, after you finish, you show them the app, you click on a button, "Hello World" appears on the screen, and then they ask,

"Can I see the world's response?"

"The world's response, what do you mean?"

"Well we've said hello to the world, shouldn't the world say something back?"

NO!!  It shouldn't!! Now you spend the next 3 days arguing with the customer about this foolishness, and the next week working on something stupid.  Now of course, this is clearly ridiculous, but do realize, people will have some pretty crazy request, and if you have simply a set rate, you could be asking for a heap of trouble.  With that said, I do know of some people who have found great contracts at set prices and they've loved it.  So don't feel as this is a one size fits all scenario.  But be very, very, very, very, very careful when deciding to do one of these contracts, because you may become their slave.  So please be careful with this, trust me!
<h1>Mindset #6 - If the customer says I'm horrible, he must be right</h1>
<p style="text-align:center;"><img class="aligncenter" alt="" src="http://images1.sw-cdn.net/model/picture/674x501_161541_109750_1338413386.jpg" width="425" height="316" /></p>
I know that in the world of sales people say that the "customer is always right."  But that's not <strong>always</strong> true.  What I mean is that, if the customer says that this project is taking way longer then it should, and it's because you're not working fast enough, and there's other developers out there who can do this job better than you, and your work is sloppy, and they've never seen such horrible, sloppy, and unprofessional work.  They're probably over-exaggerating!  Maybe you do see some truth in what they've said, but as humans, we sometimes have a tendency at times to see only negatives, even within ourselves.

Don't let this discourage you though.  You <strong>are</strong> a professional.  If your work is a sloppier than <strong>you</strong> like, than apologize, but don't feel like you're a sloppy worker.  If you see need for improvement, than by all means make the adjustments.  But don't ever forget, programming is all about moving forward, and getting better at your craft.  Learn from every experience, but don't let every experience get you down.  Always look at the positives of your work, and always strive to master your strengths, and build on your weaknesses.  But I cannot stress enough, don't let negative comments like these destroy your self esteem as a developer.   "Do not put faith in every word."

Generally, customers get very angry because he's upset about something else that has nothing to do with you.  Maybe his boss is pressuring him to get this done, or he's broke and is running out of money and is stressed out because the app is proving to be expensive.  Whatever the case, just keep moving forward.  Whenever I get criticism, I simply try to find what in it I could actually use to make myself a better developer, and then I just take some time to have a good laugh at how angry we as humans sometimes get.

Also, do not respond in kind, that never works.  All that happens is you either burn a bridge, or you have a more stressful time for the duration of the project.  Instead, make peace.  It's funny how I've had customers go off on my work, I respond nicely, and then their praising what I've done for them.  "An answer when mild turns away rage."  You'll realize that you can quickly turn a situation into your favor with some well thought out words.
<h1>Mindset #7 - I trust them, we don't need to have this in writing</h1>
<p style="text-align:center;"><img class="aligncenter" alt="" src="http://www.andpop.com/wp-content/uploads/2013/01/Screen-Shot-2013-01-03-at-11.18.47-AM.png" width="454" height="264" /></p>
Bad idea.  It's not a matter of trust, it's simply a matter of forgetfulness, and unintentional misunderstandings.  The problem when something is not in writing, is that sometimes you or the other person may forget something that is absolutely crucial, and it's funny how often people will forget issues dealing with pay when it comes time to pay or be paid.  And like I said, it's not intentional most of the time.  People just forget, that's why you have to have <strong>everything</strong> in writing.  That throws away all issues that may arise due to a lack of memory of the terms.  So every time you make a change, make that change in writing.  This can be as simple as sending an email addressing the new terms, that way both you and the customer will always have something to look back on.

It also fights against misunderstandings.  Sometimes you or the customer explain something, you agree, but then when you see it in writing you realize that you had no idea that that's what the other person was saying.  This happens all too often.  That's another reason to write things out, so that you and the customer can make sure that you agree on what was proposed.
<h1>Mindset #8 - I'm sure the app will be done soon, no need for deadlines</h1>
<p style="text-align:center;"><img class="aligncenter" alt="" src="http://s3.amazonaws.com/rapgenius/filepicker%2Fm2kd19XdQGauWjzGSOTp_tumblr_mgw7vfMhFq1qewdp6o1_1280.jpg" width="302" height="418" /></p>
Do you get the point from the image?  You need deadlines in order to make sure that there is consistent progress, and that the app finishes at a reasonable time.  Some customers can have a tendency to ask for changes forever.  You want to make sure that you and the customer knows when the app should be done by, in that way you can put a lid on indefinite changes, and not create your own never ending story.

Well this is just some tidbits that I thought my fellow iOS contract developers could benefit from.  If you have any other suggestions you would like to see on this page, feel free to write a comment.

iOS contract work can be a wonderful experience, but it can also be a very difficult one.  So please, use the information that I've put on this blog.  Tailor fit the information for your specific circumstances.  Unfortunately, much of what I'm writing I have experienced in my time doing contract work, but I've learned much from it.  So no matter what happens, keep going at it, and enjoy coding.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>61</wp:post_id>
  <wp:post_date>2013-12-12 20:59:15</wp:post_date>
  <wp:post_date_gmt>2013-12-12 20:59:15</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>ios-contract-mindsets-to-abhor</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[default]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>cba91-frustration</title>
  <link>http://intertherabbithole.wordpress.com/ios-contract-mindsets-to-abhor/cba91-frustration/#main</link>
  <pubDate>Thu, 12 Dec 2013 20:59:17 +0000</pubDate>
  <dc:creator>adeiji</dc:creator>
  <guid isPermaLink="false">http://intertherabbithole.files.wordpress.com/2013/12/cba91-frustration.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>67</wp:post_id>
  <wp:post_date>2013-12-12 20:59:17</wp:post_date>
  <wp:post_date_gmt>2013-12-12 20:59:17</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>cba91-frustration</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>61</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://intertherabbithole.files.wordpress.com/2013/12/cba91-frustration.gif</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>auto_import</wp:meta_key>
    <wp:meta_value><![CDATA[http://3.bp.blogspot.com/-YMNWqt0mqiE/UYFtOXOWfAI/AAAAAAAAAg8/Rizyelqy0QM/s1600/frustration.gif]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title/>
  <link>http://intertherabbithole.wordpress.com/2013/12/12/69/</link>
  <pubDate>Thu, 12 Dec 2013 21:03:42 +0000</pubDate>
  <dc:creator>adeiji</dc:creator>
  <guid isPermaLink="false">http://intertherabbithole.wordpress.com/?p=69</guid>
  <description/>
  <content:encoded><![CDATA[ ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>69</wp:post_id>
  <wp:post_date>2013-12-12 21:03:42</wp:post_date>
  <wp:post_date_gmt>2013-12-12 21:03:42</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>69</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>2</wp:menu_order>
  <wp:post_type>nav_menu_item</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="nav_menu" nicename="main-menu"><![CDATA[Main Menu]]></category>
  <wp:postmeta>
    <wp:meta_key>_menu_item_type</wp:meta_key>
    <wp:meta_value><![CDATA[post_type]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object_id</wp:meta_key>
    <wp:meta_value><![CDATA[61]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object</wp:meta_key>
    <wp:meta_value><![CDATA[page]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_target</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_classes</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_xfn</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title/>
  <link>http://intertherabbithole.wordpress.com/2013/12/12/70/</link>
  <pubDate>Thu, 12 Dec 2013 21:03:43 +0000</pubDate>
  <dc:creator>adeiji</dc:creator>
  <guid isPermaLink="false">http://intertherabbithole.wordpress.com/?p=70</guid>
  <description/>
  <content:encoded><![CDATA[ ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>70</wp:post_id>
  <wp:post_date>2013-12-12 21:03:43</wp:post_date>
  <wp:post_date_gmt>2013-12-12 21:03:43</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>70</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>3</wp:menu_order>
  <wp:post_type>nav_menu_item</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="nav_menu" nicename="main-menu"><![CDATA[Main Menu]]></category>
  <wp:postmeta>
    <wp:meta_key>_menu_item_type</wp:meta_key>
    <wp:meta_value><![CDATA[post_type]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object_id</wp:meta_key>
    <wp:meta_value><![CDATA[55]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object</wp:meta_key>
    <wp:meta_value><![CDATA[page]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_target</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_classes</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_xfn</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title/>
  <link>http://intertherabbithole.wordpress.com/2013/12/12/71/</link>
  <pubDate>Thu, 12 Dec 2013 21:03:44 +0000</pubDate>
  <dc:creator>adeiji</dc:creator>
  <guid isPermaLink="false">http://intertherabbithole.wordpress.com/?p=71</guid>
  <description/>
  <content:encoded><![CDATA[ ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>71</wp:post_id>
  <wp:post_date>2013-12-12 21:03:44</wp:post_date>
  <wp:post_date_gmt>2013-12-12 21:03:44</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>71</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>4</wp:menu_order>
  <wp:post_type>nav_menu_item</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="nav_menu" nicename="main-menu"><![CDATA[Main Menu]]></category>
  <wp:postmeta>
    <wp:meta_key>_menu_item_type</wp:meta_key>
    <wp:meta_value><![CDATA[post_type]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object_id</wp:meta_key>
    <wp:meta_value><![CDATA[41]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object</wp:meta_key>
    <wp:meta_value><![CDATA[page]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_target</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_classes</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_xfn</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>salescalc(new)</title>
  <link>http://intertherabbithole.wordpress.com/ios-apps/salescalc-2/#main</link>
  <pubDate>Sun, 05 Jan 2014 20:05:17 +0000</pubDate>
  <dc:creator>adeiji</dc:creator>
  <guid isPermaLink="false">http://intertherabbithole.files.wordpress.com/2013/12/salescalc1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>74</wp:post_id>
  <wp:post_date>2014-01-05 20:05:17</wp:post_date>
  <wp:post_date_gmt>2014-01-05 20:05:17</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>salescalc-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>41</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://intertherabbithole.files.wordpress.com/2013/12/salescalc1.png</wp:attachment_url>
</item>
<item>
  <title>todolist</title>
  <link>http://intertherabbithole.wordpress.com/ios-apps/todolist/#main</link>
  <pubDate>Tue, 07 Jan 2014 22:54:28 +0000</pubDate>
  <dc:creator>adeiji</dc:creator>
  <guid isPermaLink="false">http://intertherabbithole.files.wordpress.com/2013/12/todolist.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>77</wp:post_id>
  <wp:post_date>2014-01-07 22:54:28</wp:post_date>
  <wp:post_date_gmt>2014-01-07 22:54:28</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>todolist</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>41</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://intertherabbithole.files.wordpress.com/2013/12/todolist.png</wp:attachment_url>
</item>
<item>
  <title>3 Tips for Simple, Elegant, iOS Design</title>
  <link>http://intertherabbithole.wordpress.com/2014/01/16/3-tips-for-simple-elegant-ios-design/</link>
  <pubDate>Thu, 16 Jan 2014 07:00:19 +0000</pubDate>
  <dc:creator>adeiji</dc:creator>
  <guid isPermaLink="false">http://intertherabbithole.wordpress.com/?p=81</guid>
  <description/>
  <content:encoded><![CDATA[As an iOS Developer, you fully one understand one absolutely essential aspect of marketing.
<h1>"The apps that are beautiful...sale!!"</h1>
The thing is though, not everyone has a limitless supply of funds to pay designers.  And not everyone knows a designer who if you pay him, will actually deliver a quality product.  So the question is, how do you make sure that you're design is one that will make the end user go...wow!  I've put together three simple tips and principles to think about when designing.  In the future, I’ll add more.  Hopefully this will help you in your endeavor of creating beautiful UIs.  At the end of each tip, I’ll show you an example of what I mean for each tip.

Tip 1 - "Imitation is the greatest form of flattery"

It is a fundamental truth that there are many apps out there that are stunningly gorgeous.  When you are going to create an app, why not look at some designs of others.  Here is what I do.
<ol>
	<li>I do a search on the app store for an app similar to the one that I’m about to make.</li>
	<li>Then I look at the first say 20 of them, and I narrow it down to about 3 that I find most beautiful.</li>
	<li>Then I just analyze the three apps and try to determine what makes them so elegant.</li>
	<li>Then I read the reviews and see what others are saying about them.   (Customers know what they want and they’ll be honest if they want to see something different.)</li>
	<li>After all this, I generally have an idea of what I want, and I begin my mock up.</li>
</ol>
The great thing about this system is that you have an idea of what others have already done that worked and that did not work.  Also, I find it easier to build something after I’ve seen something that I can kind of build off of.  Now this isn’t copying, it’s simply imitating.  Eventually you’ll be happy that others are imitating your app designs.

So let’s see an example.  Look at the Yahoo Weather.  What makes this so nice?

<a href="http://intertherabbithole.files.wordpress.com/2014/01/yahooweatherapp.jpg"><img class="aligncenter size-full wp-image-84" alt="yahooweatherapp" src="http://intertherabbithole.files.wordpress.com/2014/01/yahooweatherapp.jpg" width="618" height="535" /></a>

1)      Beautiful background pictures?

2)      Fonts are easy to see on the pictures because they make sure the images they use have dark areas where there is text?

3)      The icons are very consistent, and very simple?

4)      They utilize Flat UI?

5)      The font selections are perfect?

So then you would strive to imitate this screen, of course not an exact replica, but strive to use beautiful background pictures with well-placed fonts with good font selections, and Flat UI.
<h1>Tip 2 – “Keep it simple Socrates”</h1>
“Wisdom is with the modest one.”  What does that mean?  It means you have to understand your limitations.  If you’re not a graphics designer, don’t try to make some epic design with all kinds of rotating images and parallax scrolling, with particle affects.  All that’s going to happen is you’re going to have a jumbled up bunch of nonsense.  Instead, focus on simplicity.  Instead of having 20 things on the screen that are all kind of just thrown together, have 3 things done beautifully.   A good example of this is an app made by Fueled called Elevatr.  Look at the app screenshots below.

<a href="http://intertherabbithole.files.wordpress.com/2014/01/elevatr.jpg"><img class="aligncenter size-full wp-image-82" alt="elevatr" src="http://intertherabbithole.files.wordpress.com/2014/01/elevatr.jpg" width="682" height="488" /></a>

Do you notice how simple the first screen shot is?  There’s nothing fancy at all about this.  It’s simply a static picture with some text, but it does its job.  The second screenshot, is extremely elegant but simple, it's simply just a table with some text.

Look at the 3<sup>rd</sup> screenshot.  What makes this screen so elegant?  Notice the user of colors makes the app very pleasing to the eye.  The way they have the information compressed in the boxes, and when you want to view all the information you SIMPLY click on the plus sign.

Now what makes all this so nice though, it's well thought out colors, a well thought out image, and well thought out font selections and locations.  That's it!!  Nothing fancy!!

Now ask yourself.  Could I do this?

The answer is an emphatic YES!!!

That’s what makes this so awesome.  It’s not overly complicated.   Simplicity is often better then complexity.
<h1>Tip 3 - “What we see depends mainly on what we look for.”</h1>
If you want to have good designs, it is very important that you keep your eyes open for good designs in everything that you see.   What do I mean by that?  Well, it’s interesting how everything that we see, really has some sort of design, you just need to keep your eye open for it.  For example, when I went to CES in 2014, I was taking pictures of everything from cars to the carpet selection.  Why?  Because hidden there was design.

<a href="http://intertherabbithole.files.wordpress.com/2014/01/mustang.jpg"><img class="aligncenter size-full wp-image-83" alt="mustang" src="http://intertherabbithole.files.wordpress.com/2014/01/mustang.jpg" width="682" height="511" /></a>

Look at this picture of a mustang interior.  Now, this looks like a beautiful interior, right?  Why not use these colors for a color scheme of an app?  Metallic silver, yellow, black, with maybe some ribbons of red and white.  You’d be amazed at how something like that could look!

Do you get the idea?  Use designs that you may have not thought of to give you ideas for an app.

So these are just a few tips that I wanted to share to help people to get some killer designs for their apps.  If anyone has any good links to their own designs, or to some cool tips, just leave a link or something in the comment.  Hope that this helps everyone who reads it.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>81</wp:post_id>
  <wp:post_date>2014-01-16 07:00:19</wp:post_date>
  <wp:post_date_gmt>2014-01-16 07:00:19</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>3-tips-for-simple-elegant-ios-design</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="apps"><![CDATA[apps]]></category>
  <category domain="post_tag" nicename="beautiful"><![CDATA[beautiful]]></category>
  <category domain="post_tag" nicename="design"><![CDATA[design]]></category>
  <category domain="post_tag" nicename="development"><![CDATA[development]]></category>
  <category domain="post_tag" nicename="elegant"><![CDATA[elegant]]></category>
  <category domain="post_tag" nicename="ios"><![CDATA[ios]]></category>
  <category domain="post_tag" nicename="programming"><![CDATA[programming]]></category>
  <category domain="post_tag" nicename="simple"><![CDATA[simple]]></category>
  <category domain="post_tag" nicename="tips"><![CDATA[tips]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>elevatr</title>
  <link>http://intertherabbithole.wordpress.com/2014/01/16/3-tips-for-simple-elegant-ios-design/elevatr/#main</link>
  <pubDate>Thu, 16 Jan 2014 06:52:13 +0000</pubDate>
  <dc:creator>adeiji</dc:creator>
  <guid isPermaLink="false">http://intertherabbithole.files.wordpress.com/2014/01/elevatr.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>82</wp:post_id>
  <wp:post_date>2014-01-16 06:52:13</wp:post_date>
  <wp:post_date_gmt>2014-01-16 06:52:13</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>elevatr</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>81</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://intertherabbithole.files.wordpress.com/2014/01/elevatr.jpg</wp:attachment_url>
</item>
<item>
  <title>mustang</title>
  <link>http://intertherabbithole.wordpress.com/2014/01/16/3-tips-for-simple-elegant-ios-design/mustang/#main</link>
  <pubDate>Thu, 16 Jan 2014 06:52:16 +0000</pubDate>
  <dc:creator>adeiji</dc:creator>
  <guid isPermaLink="false">http://intertherabbithole.files.wordpress.com/2014/01/mustang.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>83</wp:post_id>
  <wp:post_date>2014-01-16 06:52:16</wp:post_date>
  <wp:post_date_gmt>2014-01-16 06:52:16</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>mustang</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>81</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://intertherabbithole.files.wordpress.com/2014/01/mustang.jpg</wp:attachment_url>
</item>
<item>
  <title>yahooweatherapp</title>
  <link>http://intertherabbithole.wordpress.com/2014/01/16/3-tips-for-simple-elegant-ios-design/yahooweatherapp/#main</link>
  <pubDate>Thu, 16 Jan 2014 06:52:18 +0000</pubDate>
  <dc:creator>adeiji</dc:creator>
  <guid isPermaLink="false">http://intertherabbithole.files.wordpress.com/2014/01/yahooweatherapp.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>84</wp:post_id>
  <wp:post_date>2014-01-16 06:52:18</wp:post_date>
  <wp:post_date_gmt>2014-01-16 06:52:18</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>yahooweatherapp</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>81</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://intertherabbithole.files.wordpress.com/2014/01/yahooweatherapp.jpg</wp:attachment_url>
</item>
<item>
  <title>UITableViews and the Observer Pattern</title>
  <link>http://intertherabbithole.wordpress.com/?p=88</link>
  <pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>adeiji</dc:creator>
  <guid isPermaLink="false">http://intertherabbithole.wordpress.com/?p=88</guid>
  <description/>
  <content:encoded><![CDATA[The Observer Pattern?  What is that?

The Observer Pattern is a pattern that works wonderfully when you want to use UITableViews where clicking on a cell makes a change on a completely different object.  For example, when you have a Split View Controller on an iPad like the following mail app.  The left side contains what's normally called the Master View Controller, and the right side is your Detail View Controller.  So now, say you click on a cell on the Master View Controller, well you want to make a change on the Detail View Controller.

Now there's multiple ways you could do this, and multiple ways you've probably tried.  For example, you can hold an instance of the Detail View Controller object in the Master View Controller and then when there's a change, just make the changes directly to the object instance.  I personally don't find this a very elegant solution though.  The method that I prefer, is to use the Observer Pattern.  So how does it work?

In this pattern, one object tells the other object that something just happened, for example, a cell click, or any other state change.
<h1>The Situation</h1>
So say you have an app like the Yahoo Mail app.  You of course want to be able to click on a table cell and then see changes on the view to the right.  Here's an example of how you would do this.

<img class="aligncenter" alt="" src="http://cdn.iphoneincanada.ca/wp-content/uploads/2013/04/yahoo-mail-ipad.jpg" />

So first what I'm going to do is write the code, and then I'll explain it.  So this code will go into the View class on the right side,]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>88</wp:post_id>
  <wp:post_date>2014-01-29 02:27:02</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>Get More Work Done When Working Remotely</title>
  <link>http://intertherabbithole.wordpress.com/2014/01/20/get-more-work-done-when-working-remotely/</link>
  <pubDate>Mon, 20 Jan 2014 19:19:14 +0000</pubDate>
  <dc:creator>adeiji</dc:creator>
  <guid isPermaLink="false">http://intertherabbithole.wordpress.com/?p=90</guid>
  <description/>
  <content:encoded><![CDATA[When beginning to work remotely, your initial reaction is, "THIS IS GREAT!!!"  You get to work when you want, and when you are working, you're in a comfortable environment, your home.  But there is quickly one problem that you run into.  How do I make sure that I'm productive?  This can be difficult.  For most likely your entire life, you have gone somewhere to work, and people there push you to make sure that you're doing your job in a timely manner.  Now all of a sudden, that motivation falls upon you.  So how can you make sure that you get more work done when working remotely?  Here are three things that have helped me to be more productive when working remotely.
<h2>1) <b>“The plans of the diligent ones surely lead to success.”</b></h2>
Planning ahead is essential to being successful in getting work done.  When you already have in mind a good idea of what you want to accomplish in the day, you will find that you actually do more, because you’re guided by something.  What I do is I use an app called <b>“Simple Daily ToDo List</b>” created by none other than yours truly (sorry for the self-promotion).  But honestly, the reason why I wrote and use this application is so that I can have a very simple way of writing out what I want to do for the day, and then check off what I accomplish as I finish things.  I would actually recommend you getting it, or another app of your choice of course.

It’s a fact that when we write out what we want to accomplish we actually decrease our stress levels because now we don’t have to juggle a lot of things in our minds, and also, once it’s down in writing, you’re more apt to finish it because you have a <b>plan </b>that you can continually refer to which lessens the chances that you deviate from that plan.  Also, it’s very good to be able to see what you accomplished at the end of the day, which is why the app keeps finished tasks there until the next day.  You feel better about yourself when you can look at list of everything that you did.

[caption id="attachment_77" align="aligncenter" width="682"]<a href="http://intertherabbithole.files.wordpress.com/2013/12/todolist.png"><img class="size-full wp-image-77 " alt="todolist" src="http://intertherabbithole.files.wordpress.com/2013/12/todolist.png" width="682" height="436" /></a> Simple Daily ToDo List[/caption]

Another app that you may want to check out is “Asana”.  Asana is good because you can write out tasks for an entire project.  Asana coupled with Simple Daily ToDo List will make you more productive instantly.  The great thing about this app is it also has a web interface, so you can use web interface on the desktop and it will sync automatically to your phone.
<h2>2) <b>“There is benefit in every kind of hard work, But mere talk leads to want”</b></h2>
One of the most difficult things when working remotely is dealing with the fact that your family wants your attention.  The fact of the matter is though, when you’re at home working, it’s the same as working in an office it’s just that you’re at home.  So everyone in the home must understand that when you are working, unless it’s an absolute emergency, you can’t be bothered.  It’s just like when you’re in an office, if someone needs something, or just wants to talk, they have to call you, and they’re probably not going to do that unless it’s absolutely urgent.  So make that known.  Let everyone know that you’re working, and that means you can’t be bothered for trivialities.  This can be tough though (especially if you have kids), so how can you make it a little easier on yourself.

Close the door when you’re working, and tell people that you’re working so please don’t bother you.  You’ll find that this will help you tremendously in getting work done because we all know that when you’re in the groove, the last thing that you want is to be bothered, because once you’re out the groove, it can take a while to get back into it.  Also, one thing that I do is I put on some noise cancellation headphones, and play some music, typically a Pandora station.  This helps you stay relaxed, and it also helps keep out outside noise which will most likely always be there depending on how many people you have in your home.
<h2>3) <b>“Better is a handful of rest than a double handful of hard work”</b></h2>
Make sure that you take some time to rest.  I know that sounds obvious, but you have no idea how hard this is.  Generally you want to just beast through a full day, and you realize at the end that you never took a break.  The fact of the matter is you’ll actually accomplish more if you just get up every few hours and do something.  Doesn’t really matter what it is; just give your mind a rest.  This especially is important when you’re stuck at a problem that you can’t solve.  If you walk away for a few minutes and come back, you’ll notice that you feel so much better, and you’ll probably find a solution to that problem you couldn’t solve.  So remember, rest actually helps you to work better.  Don’t overdue this though.  If you rest too much, you’ll get nothing done, but I don’t think I need to tell you that. So there’s a few tips that I hope will help you out.  If you have any other ideas then comment and let the world know what you do.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>90</wp:post_id>
  <wp:post_date>2014-01-20 19:19:14</wp:post_date>
  <wp:post_date_gmt>2014-01-20 19:19:14</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>get-more-work-done-when-working-remotely</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="development"><![CDATA[development]]></category>
  <category domain="post_tag" nicename="diligence"><![CDATA[diligence]]></category>
  <category domain="post_tag" nicename="hard-work"><![CDATA[hard work]]></category>
  <category domain="post_tag" nicename="ios"><![CDATA[ios]]></category>
  <category domain="post_tag" nicename="productivity"><![CDATA[productivity]]></category>
  <category domain="post_tag" nicename="remote"><![CDATA[remote]]></category>
  <category domain="post_tag" nicename="simple-daily-todo-list"><![CDATA[simple daily todo list]]></category>
  <category domain="post_tag" nicename="simple-tasks"><![CDATA[simple tasks]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <category domain="post_tag" nicename="work"><![CDATA[work]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Why I Make Music... </title>
  <link>http://intertherabbithole.wordpress.com/2014/01/21/why-i-make-music/</link>
  <pubDate>Tue, 21 Jan 2014 16:35:20 +0000</pubDate>
  <dc:creator>adeiji</dc:creator>
  <guid isPermaLink="false">http://intertherabbithole.wordpress.com/2014/01/21/why-i-make-music/</guid>
  <description/>
  <content:encoded><![CDATA[This is how every craftsman should feel about his craft.  If you enjoy what you're doing, people will know you're quality before they ever even see what you've done.  One can learn a lot from those around us!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>99</wp:post_id>
  <wp:post_date>2014-01-21 16:35:20</wp:post_date>
  <wp:post_date_gmt>2014-01-21 16:35:20</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>why-i-make-music</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>post_id</wp:meta_key>
    <wp:meta_value><![CDATA[1365]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blog_id</wp:meta_key>
    <wp:meta_value><![CDATA[45134988]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>is_reblog</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>How to Deal with Frustrated Employees</title>
  <link>http://intertherabbithole.wordpress.com/2014/01/21/how-to-deal-with-frustrated-employees/</link>
  <pubDate>Tue, 21 Jan 2014 16:56:58 +0000</pubDate>
  <dc:creator>adeiji</dc:creator>
  <guid isPermaLink="false">http://intertherabbithole.wordpress.com/2014/01/21/how-to-deal-with-frustrated-employees/</guid>
  <description/>
  <content:encoded><![CDATA[This is a great post for anyone who deals directly, or even indirectly with customers, or your own employees.  I think what I appreciate the most is the comments of how really as individuals we must focus on others and not on ourselves.  

I'm reblogging this because I know many people who would benefit from this information, especially in my field.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>100</wp:post_id>
  <wp:post_date>2014-01-21 16:56:58</wp:post_date>
  <wp:post_date_gmt>2014-01-21 16:56:58</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>how-to-deal-with-frustrated-employees</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>post_id</wp:meta_key>
    <wp:meta_value><![CDATA[14493]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blog_id</wp:meta_key>
    <wp:meta_value><![CDATA[10864390]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>is_reblog</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Using jQuery Datatables with NodeJS and MongoDb using mongoose-datatables</title>
  <link>http://intertherabbithole.wordpress.com/2014/01/24/using-jquery-datatables-with-nodejs-and-mongodb-using-mongoose-datatables/</link>
  <pubDate>Fri, 24 Jan 2014 03:25:45 +0000</pubDate>
  <dc:creator>adeiji</dc:creator>
  <guid isPermaLink="false">http://intertherabbithole.wordpress.com/?p=101</guid>
  <description/>
  <content:encoded><![CDATA[So what exactly is this long name all about?  Well let's just dive right into it. jQuery <a href="http://datatables.net/">Datatable </a>is an awesome tool to use as a table for your website.  It offers some nice features right off the bat such as sorting, and searching mechanisms.  So using it can save you a lot of development time. I realized rather quickly though when implementing this tool in my website that using the jQuery datatable with Node and MongoDb was a little difficult, mainly because of the lack of documentation.  That's why I decided to write a blog post about how to create a datatable with <a href="http://nodejs.org/api/">NodeJS </a>as the server, and <a href="http://www.mongodb.org/">MongoDb </a>as the back end database.  Keep in mind, there are a lot of details that I will not go into that have to do with NodeJS.  So if you're unfamiliar with Node you may want to look into it first.   So here we go! So we're going to have four files.
<ul>
	<li>index.html - The web page itself</li>
	<li>mongo.js - This will handle all our database manipulations using mongoose</li>
	<li>node.js - This will be where we write our Node server</li>
	<li>main.js - This is where we handle all the client side javascript.</li>
</ul>
The example that I have here is using a document that I created entitled reservations with four fields.  The Json looks like this.
<pre><span style="color:#808080;">reservation : {</span>
<span style="color:#808080;">   name : String,</span>
<span style="color:#808080;">   startDate : String,</span>
<span style="color:#808080;">   endDate : String,</span>
<span style="color:#808080;">   confirmationCode : String</span>
<span style="color:#808080;">}</span></pre>
The first thing you need to do is create a table with the columns already specified.  This is an example of what you can do.  Keep in mind though that this table will not be too pretty, I'm not showing any fancy design with this.
<h2>index.html</h2>
<pre><span style="color:#808080;">&lt;!--We need these two js files included. You need jquery 1.7.2 because for some reason the newer versions have issues with datatables. The second will be the js file for the datatable itself.--&gt;</span>
<span style="color:#808080;">&lt;script type="text/javascript" src="path/to/1.7.2.jquery.min.js"&gt;&lt;/script&gt;</span>
<span style="color:#808080;">&lt;script type="text/javascript" src="path/to/jquery.dataTables.js"&gt;&lt;/script&gt;</span>
<span style="color:#808080;">&lt;table id="example" cellpadding="0" cellspacing="0" border="0" &gt;</span>
<span style="color:#808080;">&lt;thead&gt;</span>
<span style="color:#808080;">  &lt;tr&gt;</span>
<span style="color:#808080;">    &lt;th&gt;Name&lt;/th&gt;</span>
<span style="color:#808080;">    &lt;th&gt;Start Date&lt;/th&gt;</span>
<span style="color:#808080;">    &lt;th&gt;End Date&lt;/th&gt;</span>
<span style="color:#808080;">    &lt;th&gt;Confirmation #&lt;/th&gt;</span>
<span style="color:#808080;">  &lt;/tr&gt;</span>
<span style="color:#808080;"> &lt;/thead&gt;</span>
<span style="color:#808080;"> &lt;tbody&gt;</span>
<span style="color:#808080;">   &lt;tr&gt;&lt;/tr&gt;</span>
<span style="color:#808080;"> &lt;/tbody&gt;</span>
<span style="color:#808080;">&lt;/table&gt;</span></pre>
So this is just a simple table, with column names:
<ul>
	<li><span style="font-family:Consolas, Monaco, monospace;font-size:12px;line-height:18px;">Name</span></li>
	<li><span style="font-family:Consolas, Monaco, monospace;font-size:12px;line-height:18px;">Start Date</span></li>
	<li><span style="font-family:Consolas, Monaco, monospace;font-size:12px;line-height:18px;">End Date</span></li>
	<li><span style="font-family:Consolas, Monaco, monospace;font-size:12px;line-height:18px;">Confirmation #</span></li>
</ul>
Now here's what you need in your Node Javascript file.  I always name mine node.js.
<h2>node.js</h2>
<pre><span style="color:#808080;">function start ()</span>
<span style="color:#808080;"> {</span>
<span style="color:#808080;">   var http = require("http");</span>
<span style="color:#808080;">   var fs = require("fs");</span>
<span style="color:#808080;">   var express = require('express');</span>
<span style="color:#808080;">   var app = express();</span>
<span style="color:#808080;">   var mongo = require("./mongo"); </span>
<span style="color:#808080;">   app.configure(function () {</span>
<span style="color:#808080;">     app.use(express.bodyParser());</span>
<span style="color:#808080;">     app.use(app.router); app.all('/', function(req, res, next) {</span>
<span style="color:#808080;">       res.header("Access-Control-Allow-Origin", "*");</span>
<span style="color:#808080;">       res.header("Access-Control-Allow-Headers", "Content-Type");</span>
<span style="color:#808080;">       next();</span>
<span style="color:#808080;">     });</span>
<span style="color:#808080;">  }); </span>

<span style="color:#808080;">  app.get('/mongo/get/datatable', mongo.getDataForDataTable) //Here's the line that we're looking at specifically</span>
<span style="color:#808080;">  app.use(express.static(__dirname));</span>
<span style="color:#808080;">  app.listen(process.env.PORT || 8080);</span>
<span style="color:#808080;">}; </span>

<span style="color:#808080;">exports.start = start;</span></pre>
Here's the line that we really need to look at.
<pre><span style="color:#808080;">app.get('/mongo/get/datatable', mongo.getDataForDataTable)</span></pre>
So here is our GET request. What this line does, if you're not really familiar with Node, is it will route a GET request to the method getDataForDataTable in my mongo.js file. Now lets move onto our mongo.js file.
<h2>mongo.js</h2>
First off, you want these variables to be global.
<pre><span style="color:#808080;">var mongoose = require('mongoose');</span>
<span style="color:#808080;">var DataTable = require('mongoose-datatable');</span>
<span style="color:#808080;">var MyModel;</span></pre>
Configuring is optional, but if you do, make sure you configure the datatable and initialize it on start up.
<pre><span style="color:#808080;">DataTable.configure({ verbose: false, debug : false });</span>
<span style="color:#808080;">mongoose.plugin(DataTable.init); var dbURI = 'mongodb://localhost/test';</span>
<span style="color:#808080;">mongoose.connect(dbURI);</span></pre>
Once again, I set these variables you see below as global, but they don't have to be, just make sure they can be reached in the db.once method, which we will be writing below.
<pre><span style="color:#808080;">//Global
var db = mongoose.connection;</span>
<span style="color:#808080;">var reservations;</span>
<span style="color:#808080;">var dates; var reservationsSchema;</span>
<span style="color:#808080;">var dateSchema;

db.on('error', console.error.bind(console, 'connection error:'));
db.once('open', function callback ()</span>
<span style="color:#808080;">{</span>
<span style="color:#808080;">  console.log('Connection has succesfully opened');</span>
<span style="color:#808080;">  var Schema = mongoose.Schema;
  reservationsSchema = new Schema(</span>
<span style="color:#808080;">  {</span>
<span style="color:#808080;">    reservation :</span>
<span style="color:#808080;">    {</span>
<span style="color:#808080;">       name : String,</span>
<span style="color:#808080;">       startDate : String,</span>
<span style="color:#808080;">       endDate : String,</span>
<span style="color:#808080;">       confirmationCode : String</span>
<span style="color:#808080;">    }</span>
<span style="color:#808080;"> });</span>
<span style="color:#808080;"> reservations = mongoose.model('reservations', reservationsSchema);</span>
<span style="color:#808080;"> MyModel = require('mongoose').model('reservations');</span>
<span style="color:#808080;">});</span></pre>
So here what we're doing is creating the Schema (reservationsSchema) which is necessary in order to create the model (MyModel) object. The following line retrieves the model.
<pre><span style="color:#808080;">reservations = mongoose.model('reservations', reservationsSchema);</span></pre>
And in the line below we set the model MyModel, which will be using later.
<pre><span style="color:#808080;">MyModel = require('mongoose').model('reservations');</span></pre>
<span style="line-height:1.5em;">So so far we've:</span>
<ol>
	<li>Created a small table with the columns specified.</li>
	<li>Wrote a router which will route our get request to the proper method in the mongo.js file.</li>
	<li>Created our model and schema which both are necessary in order to retrieve the documents from the Mongo database.</li>
</ol>
Now here is our code to get the data from the Mongo database.
<pre><span style="color:#808080;">exports.getDataForDataTable = function getData (request, response) {</span>
<span style="color:#808080;">  //"type.typeName" : "Trolley"</span>
<span style="color:#808080;">  //console.log("Get Request for Data Table made with data: ", request.query);</span>
<span style="color:#808080;">  MyModel.dataTable(request.query, function (err, data) {</span>
<span style="color:#808080;">    response.send(data);</span>
<span style="color:#808080;">  });</span>
<span style="color:#808080;">};</span></pre>
So what did I just do? We
<ol>
	<li>Called the dataTable method on the MyModel object, and sent request.query (JSON) as the query for what data we want to receive.  For now, we aren't going to mess with that query at all, so that will be the default setting.</li>
	<li>Returned the data object which contains our documents that we just searched for.</li>
</ol>
And here's the final part of our code.
<pre><span style="color:#808080;">$('#reservationTable').dataTable({</span>
<span style="color:#808080;">  "bProcessing" : true,</span>
<span style="color:#808080;">  "bServerSide" : true,</span>
<span style="color:#808080;">  "sAjaxSource" : '/mongo/get/datatable',</span>
<span style="color:#808080;">  "aoColumns" : [</span>
<span style="color:#808080;">    { "mData" : "reservation.name" },</span>
<span style="color:#808080;">    { "mData" : "reservation.startDate" },</span>
<span style="color:#808080;">    { "mData" : "reservation.endDate" },</span>
<span style="color:#808080;">    { "mData" : "reservation.confirmationCode" }</span>
<span style="color:#808080;">  ]</span>
<span style="color:#808080;">});</span></pre>
So here's what we got going on.
<ol>
	<li>"<a href="http://datatables.net/ref#bProcessing">bProcessing</a>" : "true" - Enable or disable the display of a 'processing' indicator when the table is being processed (e.g. a sort). This is particularly useful for tables with large amounts of data where it can take a noticeable amount of time to sort the entries.</li>
	<li>"<a href="http://datatables.net/usage/server-side">bServerSide</a>" : "true" - Configure DataTables to use server-side processing. Note that the sAjaxSource parameter must also be given in order to give DataTables a source to obtain the required data for each draw.</li>
	<li>"<a href="http://datatables.net/usage/server-side">sAjaxSource</a>" - This is the address of our GET request.</li>
	<li>"<a href="http://datatables.net/usage/columns">aoColumns</a>" - Used to give DataTables specific instructions for each individual column.</li>
	<li>"<a href="http://datatables.net/usage/columns#mData">mData</a>" - This property can be used to read data from any JSON data source property, including deeply nested objects / properties.</li>
</ol>
So basically what I'm doing here is setting the table up to show when it's processing data, also telling it that we're going to be doing server side processing, and that the GET request address is /mongo/get/datatable.  Then I'm saying that the column data is going to be taken from the response to the GET request, and we want from the returned JSON, reservation.name, reservation.startDate, reservation.endDate and reservation.confirmationCode. And that's it, if you run the website now on the server you've created, you will see that it's populated with data.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>101</wp:post_id>
  <wp:post_date>2014-01-24 03:25:45</wp:post_date>
  <wp:post_date_gmt>2014-01-24 03:25:45</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>using-jquery-datatables-with-nodejs-and-mongodb-using-mongoose-datatables</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="client-side"><![CDATA[client-side]]></category>
  <category domain="post_tag" nicename="database"><![CDATA[database]]></category>
  <category domain="post_tag" nicename="datatables"><![CDATA[datatables]]></category>
  <category domain="post_tag" nicename="development"><![CDATA[development]]></category>
  <category domain="post_tag" nicename="how-to"><![CDATA[how to]]></category>
  <category domain="post_tag" nicename="html"><![CDATA[html]]></category>
  <category domain="post_tag" nicename="javascript"><![CDATA[javascript]]></category>
  <category domain="post_tag" nicename="jquery"><![CDATA[jquery]]></category>
  <category domain="post_tag" nicename="json"><![CDATA[json]]></category>
  <category domain="post_tag" nicename="learn"><![CDATA[learn]]></category>
  <category domain="post_tag" nicename="mongo"><![CDATA[mongo]]></category>
  <category domain="post_tag" nicename="mongodb"><![CDATA[mongodb]]></category>
  <category domain="post_tag" nicename="mongoose"><![CDATA[mongoose]]></category>
  <category domain="post_tag" nicename="mongoose-datatables"><![CDATA[mongoose-datatables]]></category>
  <category domain="post_tag" nicename="node"><![CDATA[node]]></category>
  <category domain="post_tag" nicename="nodejs"><![CDATA[nodejs]]></category>
  <category domain="post_tag" nicename="programming"><![CDATA[programming]]></category>
  <category domain="post_tag" nicename="server-side"><![CDATA[server-side]]></category>
  <category domain="post_tag" nicename="software"><![CDATA[software]]></category>
  <category domain="category" nicename="web-development"><![CDATA[Web Development]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/105538181443316889515/posts/faRTFoLz4Pp]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_5968174</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:11:"google_plus";a:1:{s:21:"105538181443316889515";b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://www.linkedin.com/updates?discuss=&scope=293044799&stype=M&topic=5832322113226149888&type=U&a=3FgX]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_5968166</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Amazon EC2 : "Client.AuthFailure: AWS was not able to validate the provided access credentials."</title>
  <link>http://intertherabbithole.wordpress.com/2014/01/29/amazon-ec2-client-authfailure-aws-was-not-able-to-validate-the-provided-access-credentials/</link>
  <pubDate>Wed, 29 Jan 2014 02:31:44 +0000</pubDate>
  <dc:creator>adeiji</dc:creator>
  <guid isPermaLink="false">http://intertherabbithole.wordpress.com/2014/01/29/amazon-ec2-client-authfailure-aws-was-not-able-to-validate-the-provided-access-credentials/</guid>
  <description/>
  <content:encoded><![CDATA[Post on Amazon EC2 error I ran into to.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>116</wp:post_id>
  <wp:post_date>2014-01-29 02:31:44</wp:post_date>
  <wp:post_date_gmt>2014-01-29 02:31:44</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>amazon-ec2-client-authfailure-aws-was-not-able-to-validate-the-provided-access-credentials</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/105538181443316889515/posts/Roi3R6SUJeA]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>post_id</wp:meta_key>
    <wp:meta_value><![CDATA[2]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blog_id</wp:meta_key>
    <wp:meta_value><![CDATA[56817935]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>is_reblog</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_5968174</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:11:"google_plus";a:1:{s:21:"105538181443316889515";b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://www.linkedin.com/updates?discuss=&scope=293044799&stype=M&topic=5834120451424546816&type=U&a=imP1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_5968166</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Upload Folder from Local Machine to EC2 Instance</title>
  <link>http://intertherabbithole.wordpress.com/2014/01/30/upload-folder-from-local-machine-to-ec2-instance/</link>
  <pubDate>Thu, 30 Jan 2014 21:48:44 +0000</pubDate>
  <dc:creator>adeiji</dc:creator>
  <guid isPermaLink="false">http://intertherabbithole.wordpress.com/?p=119</guid>
  <description/>
  <content:encoded><![CDATA[This was a problem that I was trying to figure out on my Windows Machine.  Here's the steps it took for me to be able to do it.

1.  Download an SSH client.  I downloaded OpenSSH.  It's a free download that you can get from <a href="http://sshwindows.sourceforge.net/download/">here</a>.

2.  Now check and see if you can SSH into your EC2 instance.   To do this, open up powershell and navigate to the folder where you store your .pem file.  This isn't necessary, but it's easier for the tutorial.  Now try to SSH into the instance like so.

ssh -i PemFile.pem ec2-user@xx.xxx.xx.xx

If it was successful you'll see a screen that looks like this.

The authenticity of host 'ec2-xxx-xx-xxx-1.compute-1.amazonaws.com (xx.xxx.xxx.xx)' can't be established.
RSA key fingerprint is 1f:51:ae:28:bf:89:e9:d8:1f:25:5d:37:2d:7d:b8:ca:9f:f5:f1:6f.
Are you sure you want to continue connecting (yes/no)?

Type in yes.  And you're logged in.

3.  Now type "exit" so you can leave your remote instance.

4.  Now here's the command line prompt to actually copy the folder to your remote instance.

scp -i PemFile.pem -r folder/to/copy/ ec2-user@xx.xxx.xx.xx:/destination/folder/to/copy/into/to

You'll now see the same screen you saw before.

The authenticity of host 'ec2-xxx-xx-xxx-1.compute-1.amazonaws.com (xx.xxx.xxx.xx)' can't be established.
RSA key fingerprint is 1f:51:ae:28:bf:89:e9:d8:1f:25:5d:37:2d:7d:b8:ca:9f:f5:f1:6f.
Are you sure you want to continue connecting (yes/no)?

Type yes, and you'll see the contents of the folder copying. After it's done, SSH into your instance and check to see if your folder is where you wanted it to be.

And that's it!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>119</wp:post_id>
  <wp:post_date>2014-01-30 21:48:44</wp:post_date>
  <wp:post_date_gmt>2014-01-30 21:48:44</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>upload-folder-from-local-machine-to-ec2-instance</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/105538181443316889515/posts/XxU5b8JTdDc]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_5968174</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:11:"google_plus";a:1:{s:21:"105538181443316889515";b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://www.linkedin.com/updates?discuss=&scope=293044799&stype=M&topic=5834774006397419520&type=U&a=vZHg]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_5968166</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Installing NodeJS on Linux EC2 Instance and Viewing from a Web Browser</title>
  <link>http://intertherabbithole.wordpress.com/2014/01/31/installing-nodejs-on-linux-ec2-instance-and-viewing-from-a-web-browser/</link>
  <pubDate>Fri, 31 Jan 2014 01:57:56 +0000</pubDate>
  <dc:creator>adeiji</dc:creator>
  <guid isPermaLink="false">http://intertherabbithole.wordpress.com/?p=122</guid>
  <description/>
  <content:encoded><![CDATA[I was actually pretty disappointed when I noticed that there aren't really any good tutorials for how to install and run Node on a Linux machine.  So I thought that I would help people out here by writing something for all you facing this issue right now.  So here we go.
<h2>Prerequisites</h2>
What do you need before you can do this?

1) Some form of an SSH client, I'm using OpenSSH for Windows.  If you're using a Mac there is already one by default.

2) ip Address of the remote Linux Instance.  I'm using an Amazon EC2 instance running Linux.  So I get my ip address from the EC2 Management Console.

3) Your .pem file for the Linux instance.
<h2>Let's Begin</h2>
1) SSH onto your Linux instance.

2) Run the following commands
<pre><span style="color:#000000;">sudo mkdir node </span>
<span style="color:#000000;">cd node </span>
<span style="color:#000000;">sudo wget http://nodejs.org/dist/v0.6.6/node-v0.6.6.tar.gz </span>
<span style="color:#000000;">sudo tar -xzf node-v0.6.6.tar.gz</span></pre>
3) Now you need to install the Development Tools needed to compile Node.

<code>yum groupinstall "Development Tools"</code>

Now install openssl-devel:

<code>yum install openssl-devel</code>

4) Now run these commands to configure and compile node.
<pre>sudo ./configure
sudo make
sudo make install</pre>
Now there's a chance that when you uploaded your folder containing your node server and website to your Linux instance, that the folder was set to only allow super user access.  If that's the case, you'll see an error saying that access to your node file is denied.  Actually you won't even be able to cd into the folder.  If that happens, simply enter in this command.
<pre>chmod -R 777 dir_name/</pre>
5) You should now be able to run node and have access to the folder and files necessary to run your app.  Navigate to the directory that contains your node file, and run this command.
<pre>node nodefile.js</pre>
You should now have your server up and running.  The only thing though is that the server can only be reached on the local machine.  What we're going to do now is make it so that you can reach your nodejs server from anywhere.  This gets a tad bit more complicated.
<h2>Allow Remote Access From Browser to Web Server</h2>
So here's what we need to do:

1) Open the right ports using the Amazon EC2 Management Console.  To do this, go to your EC2 Management Console, click on Security Groups, and select the Security Group you're using for your EC2 instance.  Now you need to add a rule.  Open up port 80 (http) to allow connections from all ip addresses.

<img alt="" src="http://www.lauradhamilton.com/posts/2013/security_groups_screenshot.png" />

1) Good.  Now, you're app is most likely listening on port 8080, right?  What we now need to do is set up port forwarding, from port 80 to 8080.  If you're running on another port, then simply make a note of that in the following commands asking for the port to route to.  So first of all, run this command to see if you have port forwarding enabled.
<pre>cat /proc/sys/net/ipv4/ip_forward</pre>
2) It will most likely return 0.  If it does, that means that port forwarding is not enabled.  To enable it, enter the following command.

<code>sudo nano /etc/sysctl.conf</code>

If you want to you can use vim to edit this file, but that's up to you.

3) Now change this line from
<pre>net.ipv4.ip_forward = 0</pre>
to
<pre>net.ipv4.ip_forward = 1</pre>
4) Now we need to enable these changes.  Enter this command to do that.
<pre>sudo sysctl -p /etc/sysctl.conf</pre>
5) Now check and make sure that port forwarding is enabled.
<pre>cat /proc/sys/net/ipv4/ip_forward</pre>
This should now return a 1.

6) Now lets set up forwarding from port 80 to port 8080.  Enter in the following command.

<code>sudo iptables -A PREROUTING -t nat -i eth0 -p tcp --dport 80 -j REDIRECT --to-port 8080 </code>

7) Next, let's open the Linux firewall to allow connections on port 80:<code> </code>
<pre><code>sudo iptables -A INPUT -p tcp -m tcp --sport 80 -j ACCEPT
</code><code>sudo iptables -A OUTPUT -p tcp -m tcp --dport 80 -j ACCEPT</code></pre>
8) Now try and enter the public ip address of your EC2 instance in your web browser, and you should see that your server is up and running!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>122</wp:post_id>
  <wp:post_date>2014-01-31 01:57:56</wp:post_date>
  <wp:post_date_gmt>2014-01-31 01:57:56</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>installing-nodejs-on-linux-ec2-instance-and-viewing-from-a-web-browser</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="amazon-ec2"><![CDATA[amazon ec2]]></category>
  <category domain="post_tag" nicename="command-line"><![CDATA[command line]]></category>
  <category domain="post_tag" nicename="developers"><![CDATA[developers]]></category>
  <category domain="post_tag" nicename="easy-tutorial"><![CDATA[easy tutorial]]></category>
  <category domain="post_tag" nicename="ec2"><![CDATA[ec2]]></category>
  <category domain="post_tag" nicename="ec2-management-console"><![CDATA[ec2 management console]]></category>
  <category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
  <category domain="post_tag" nicename="node"><![CDATA[node]]></category>
  <category domain="post_tag" nicename="nodejs"><![CDATA[nodejs]]></category>
  <category domain="post_tag" nicename="s3"><![CDATA[s3]]></category>
  <category domain="post_tag" nicename="server"><![CDATA[server]]></category>
  <category domain="post_tag" nicename="tutorial"><![CDATA[tutorial]]></category>
  <category domain="post_tag" nicename="tuts"><![CDATA[tuts]]></category>
  <category domain="post_tag" nicename="web-browser"><![CDATA[web browser]]></category>
  <category domain="category" nicename="web-development"><![CDATA[Web Development]]></category>
  <category domain="post_tag" nicename="web-development-2"><![CDATA[web development]]></category>
  <category domain="post_tag" nicename="yum-install"><![CDATA[yum install]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/105538181443316889515/posts/Hik339AriJU]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_5968174</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:11:"google_plus";a:1:{s:21:"105538181443316889515";b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://www.linkedin.com/updates?discuss=&scope=293044799&stype=M&topic=5834836714748649472&type=U&a=wX5Q]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_5968166</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_5968174</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_5968166</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Design in Time</title>
  <link>http://intertherabbithole.wordpress.com/2014/03/04/design-in-time/</link>
  <pubDate>Tue, 04 Mar 2014 15:19:15 +0000</pubDate>
  <dc:creator>adeiji</dc:creator>
  <guid isPermaLink="false">http://intertherabbithole.wordpress.com/?p=128</guid>
  <description/>
  <content:encoded><![CDATA[<p>There's something very interesting about design that's very unique to software development, and that is its subjectiveness.  The interesting thing about graphics is that beauty is really in the eye of the beholder.  What one person may think is amazing, another may think is okay.</p><p>Now there's nothing wrong with this, but it can become an issue when developing an application.  Why?  Because it's hard to figure out what is in the mind of your customer, and therefore it is hard to give them just what they want without having to make a million changes during the implementation phase.  Now how can you make sure that the customer gets what they desire, but that you still finish the project in good time.  Let's look at a few very important things to keep in mind in order to finish your designs in time.</p><p>1.  Ask! Ask! Ask! - I'd say that the most important thing to do when trying to come up with the design for a customer's application is to ask them enough questions to gather a good idea of what they want the application to look like.  When a customer explains an application the first time, very rarely will you have enough to build a mock up.  But you have to remember, often times, a mock up is the first thing that a customer wants to see.  So how can you make sure that you have enough information after the first few conversations, preferably the first.  Ask questions like these?</p><ul><li>What style best represents this company?</li><li>What conclusion about your company do you want people to come to after viewing this application/website?</li><li>What application/website do you feel has the most similar feel to the application that you want built?</li><li>What do you want the overall feel or atmosphere of your website to be?</li></ul><p>2.  Mock it up - The previous step will give you a general idea of where to start. Once you have a starting point, you can actually do a few quick and simple mock ups.  Make them not too specific, and don't spend too much time on them.  You can do this in black and white.  The purpose of this mock up is just to get the ball rolling.  Chances are the finished product won't look anything like the initial mock ups, but it will give the client some direction to go in.</p><p>3.  Consult with the customer - This step is extremely important.  This is where you speak with the customer, and you really start to get the full idea of what the end product will look like.  The customer will most likely have a million changes that he wants.  It's very important that you write down each and every change that they want.  Remember though, at this point you haven't actually started building out the actual UI.  You're still doing all mock ups using some sort of an illustrator.  Remember, DON'T ACTUALLY START IMPLEMENTATION YET.</p><p>4.  Make the changes - Make every single change that the customer asks you for.  Make sure that the mock up is beautiful and looks almost like a finished product.  Now show this to the customer.  If the customer wants changes, make sure you make the changes only to the mock up.  At this point still do not actually start implementing the UI.</p><p>5.  Finalize the mock up - Once you've got the actual mock up looking just right, ensure that the customer wants no more changes whatsoever.  Make it known to the customer, that this is exactly how the end product will look.  Once the customer has agreed, and he is fully aware that after this there will be absolutely no more changes, start implementing.  It's important that the customer understands that there are to be no more changes because making changes to UI once you've begun implementation is a real drag and slows things down tremendously.</p><p>6.  Start implementing - Now that you're done with the mock up.  Implement the UI.  </p><p>That was simple, wasn't it?  It's important that you have definite steps with something like UI, because otherwise you will be working on it forever, and both you and the customer are bound to get irritated.  So don't forget these six simple steps and you'll have your DESIGN IN TIME.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>128</wp:post_id>
  <wp:post_date>2014-03-04 15:19:15</wp:post_date>
  <wp:post_date_gmt>2014-03-04 15:19:15</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>design-in-time</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="contract"><![CDATA[contract]]></category>
  <category domain="post_tag" nicename="contract-work"><![CDATA[contract work]]></category>
  <category domain="post_tag" nicename="design"><![CDATA[design]]></category>
  <category domain="post_tag" nicename="ios"><![CDATA[ios]]></category>
  <category domain="post_tag" nicename="mock-ups"><![CDATA[mock ups]]></category>
  <category domain="post_tag" nicename="self-employed"><![CDATA[self-employed]]></category>
  <category domain="post_tag" nicename="ui"><![CDATA[UI]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <category domain="post_tag" nicename="user-interface"><![CDATA[user interface]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>3 Apps For Design Inspiration</title>
  <link>http://intertherabbithole.wordpress.com/2014/03/07/3-apps-for-design-inspiration/</link>
  <pubDate>Fri, 07 Mar 2014 15:35:03 +0000</pubDate>
  <dc:creator>adeiji</dc:creator>
  <guid isPermaLink="false">http://intertherabbithole.wordpress.com/?p=168</guid>
  <description/>
  <content:encoded><![CDATA[I love design!! To me, an app needs to be simple and elegant, and nothing less should even be allowed.  Now granted, it's difficult, and often times beauty is in the eye of the beholder, but, it's so important.  Here are some Apps that I feel simply take the cake of simplicity, and elegance.
<h2>1. <a href="http://fueled.com/projects/elevatr/">Elevatr</a></h2>
<a href="http://intertherabbithole.files.wordpress.com/2014/01/elevatr.jpg"><img class="aligncenter size-full wp-image-82" alt="elevatr" src="http://intertherabbithole.files.wordpress.com/2014/01/elevatr.jpg" width="682" height="488" /></a>

You guys have probably seen me mention this app in a previous post, but I just can't get enough of it.  What makes this app so awesome.
<ol>
	<li>Simplicity - Everything on the screen is pretty much necessary, and when you use the app, everything is so simple and straightforward.</li>
	<li>Elegance - The app is beautiful.  The color scheme is awesome, and nothing is clashing with each other.</li>
</ol>
<h2>2.  Pinterest</h2>
<a href="http://intertherabbithole.files.wordpress.com/2014/03/pinterest-2-0-3-iphone-1.png"><img class="aligncenter size-full wp-image-171" alt="Pinterest-2.0.3-iPhone-1" src="http://intertherabbithole.files.wordpress.com/2014/03/pinterest-2-0-3-iphone-1.png" width="382" height="749" /></a>

I like Pinterest because once again
<ol>
	<li>Simple and elegant.  It's not overly fancy, not complicated, it just does what it's supposed to do.</li>
	<li>Loading Images - I love the way that the pins have random colors as the backgrounds while the image is loading.  That is such a nice touch.</li>
	<li>Easy to follow - You'll notice when you use Pinterest, it's very obvious how to do everything.  You don't need a manual.  The UI, mainly the image selections for icons, kind of explains everything you need to know.</li>
</ol>
<h2>3. Yahoo Weather App</h2>
<a href="http://intertherabbithole.files.wordpress.com/2014/03/yahooweather.jpg"><img class="aligncenter size-full wp-image-172" alt="yahooweather" src="http://intertherabbithole.files.wordpress.com/2014/03/yahooweather.jpg" width="682" height="402" /></a>

Does this even need any explanation.  Well I guess so.  Why do I love this?
<ol>
	<li>Great Font selection - The sizes and the type of font they used for everything was impeccable.</li>
	<li>Flows well -  The app is so easy to use, and they use the UI in a wonderful way to explain everything to you.  I actually like to use this weather app as opposed to many others.</li>
	<li>Image selection - You can tell they spent time finding each and every image they used, making sure that each one was just right for what they needed.  They paid close attention to every detail.</li>
</ol>
Well these are three apps that I love and just wanted to share.  Do you have any apps that you feel are beautiful.  Let me know!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>168</wp:post_id>
  <wp:post_date>2014-03-07 15:35:03</wp:post_date>
  <wp:post_date_gmt>2014-03-07 15:35:03</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>3-apps-for-design-inspiration</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="beautiful-apps"><![CDATA[beautiful apps]]></category>
  <category domain="post_tag" nicename="development"><![CDATA[development]]></category>
  <category domain="post_tag" nicename="elegance"><![CDATA[elegance]]></category>
  <category domain="post_tag" nicename="elevatr"><![CDATA[elevatr]]></category>
  <category domain="post_tag" nicename="fueled-com"><![CDATA[Fueled.com]]></category>
  <category domain="post_tag" nicename="mobile"><![CDATA[mobile]]></category>
  <category domain="post_tag" nicename="pinterest"><![CDATA[pinterest]]></category>
  <category domain="post_tag" nicename="simplicity"><![CDATA[simplicity]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <category domain="post_tag" nicename="yahoo-weather"><![CDATA[yahoo weather]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/105538181443316889515/posts/G3HYWyqpcCm]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_5968174</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:11:"google_plus";a:1:{s:21:"105538181443316889515";b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://www.linkedin.com/updates?discuss=&scope=293044799&stype=M&topic=5847725930524463104&type=U&a=gt1q]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_5968166</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_5968174</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_5968166</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Pinterest-2.0.3-iPhone-1</title>
  <link>http://intertherabbithole.wordpress.com/2014/03/07/3-apps-for-design-inspiration/pinterest-2-0-3-iphone-1/#main</link>
  <pubDate>Fri, 07 Mar 2014 15:26:43 +0000</pubDate>
  <dc:creator>adeiji</dc:creator>
  <guid isPermaLink="false">http://intertherabbithole.files.wordpress.com/2014/03/pinterest-2-0-3-iphone-1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>171</wp:post_id>
  <wp:post_date>2014-03-07 15:26:43</wp:post_date>
  <wp:post_date_gmt>2014-03-07 15:26:43</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>pinterest-2-0-3-iphone-1</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>168</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://intertherabbithole.files.wordpress.com/2014/03/pinterest-2-0-3-iphone-1.png</wp:attachment_url>
</item>
<item>
  <title>yahooweather</title>
  <link>http://intertherabbithole.wordpress.com/2014/03/07/3-apps-for-design-inspiration/yahooweather/#main</link>
  <pubDate>Fri, 07 Mar 2014 15:30:21 +0000</pubDate>
  <dc:creator>adeiji</dc:creator>
  <guid isPermaLink="false">http://intertherabbithole.files.wordpress.com/2014/03/yahooweather.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>172</wp:post_id>
  <wp:post_date>2014-03-07 15:30:21</wp:post_date>
  <wp:post_date_gmt>2014-03-07 15:30:21</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>yahooweather</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>168</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://intertherabbithole.files.wordpress.com/2014/03/yahooweather.jpg</wp:attachment_url>
</item>
<item>
  <title>How do you balance it all!</title>
  <link>http://intertherabbithole.wordpress.com/2014/03/10/how-do-you-balance-it-all/</link>
  <pubDate>Mon, 10 Mar 2014 23:42:44 +0000</pubDate>
  <dc:creator>adeiji</dc:creator>
  <guid isPermaLink="false">http://intertherabbithole.wordpress.com/?p=179</guid>
  <description/>
  <content:encoded><![CDATA[<a href="http://intertherabbithole.files.wordpress.com/2014/03/mom-cat-balancing-act.jpeg"><img class="aligncenter size-full wp-image-180" alt="mom-cat-balancing-act" src="http://intertherabbithole.files.wordpress.com/2014/03/mom-cat-balancing-act.jpeg" width="355" height="500" /></a>

&nbsp;

If you do any work for yourself, you've definitely asked yourself this question.  How in the world do I balance everything that I need to do?!  This can be one of the most difficult things to do, because if you don't balance everything out, you'll either get burned out, or the time needed for the more important things will start to slip away into non existence.  So here's some tips that I think will help you to learn the trick like my friend the Cat in the Hat here.

1. "The plans of the diligent ones surely head for advantage" - Plan out what you're going to accomplish every single day, and when you're going to tackle it.  This will make sure that you handle everything as you're supposed to, and ensures that nothing slips through the cracks.  Make sure that you also schedule in important things like spending time with friends and family too.  Those are probably the most important things that you don't want to miss.  Make sure that you write your plan as a list too.

2. Actually stick to the plan - A plan means absolutely nothing if you don't execute properly.  So make sure that your plan is actually achievable, and then resist the urge to not do something that you had planned out already.  Remember, reasonableness is a mark of wisdom, so again, don't create a list that you're not capable of completing, that will make it easier for you to stick to it.  And once your done with one item, check it off of your list.

3.  "Only two things are needed, maybe one..." - Don't feel like you have to accomplish everything this very minute.  Break tasks up into smaller ones and spread them across a few days if possible.  A lot of times if you do this, you'll accomplish much more than just frantically trying to complete something at one sitting.  Take your time.  Slow down, and just make sure that you do a good job.

4. Work on one project at a time - What I mean is work on one work project, one family project, one hobby, etc.  Don't have three work projects and eight hobby projects, you'll stress yourself out, and you won't be able to give each tasks the attention it deserves.  If you focus on just doing a good job at a few things, you'll be much happier in the long run.

5.  "Eat, drink, and see good for all your hard work" - This is my favorite part.  At the end of the day, relax, and just look at all that you accomplished that day.  Look at where you wrote down what you wanted to do that day, and smile at the fact that you finished the list, or at least accomplished some of the things you wanted to.  Grab some food, get a good drink, and enjoy your success.  Then go to sleep, and wake up the next day ready to repeat the process again.

I hope this helps you out some.  Fortunately I've had some really good friends and I have been able to receive some very good advice along my path of self-employment.  But I've also had to learn many things the hard way.  Hopefully this post will help you not have to go through some of the headaches that I had to experience.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>179</wp:post_id>
  <wp:post_date>2014-03-10 23:42:44</wp:post_date>
  <wp:post_date_gmt>2014-03-10 23:42:44</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>how-do-you-balance-it-all</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="balancing"><![CDATA[balancing]]></category>
  <category domain="post_tag" nicename="development"><![CDATA[development]]></category>
  <category domain="post_tag" nicename="help"><![CDATA[help]]></category>
  <category domain="post_tag" nicename="planning"><![CDATA[planning]]></category>
  <category domain="post_tag" nicename="self-employed"><![CDATA[self-employed]]></category>
  <category domain="post_tag" nicename="success"><![CDATA[success]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <category domain="post_tag" nicename="work"><![CDATA[work]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/105538181443316889515/posts/VDZK4k2KE4v]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_5968174</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:11:"google_plus";a:1:{s:21:"105538181443316889515";b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://www.linkedin.com/updates?discuss=&scope=293044799&stype=M&topic=5848935818458066944&type=U&a=jjtT]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_5968166</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>mom-cat-balancing-act</title>
  <link>http://intertherabbithole.wordpress.com/2014/03/10/how-do-you-balance-it-all/mom-cat-balancing-act/#main</link>
  <pubDate>Mon, 10 Mar 2014 23:27:55 +0000</pubDate>
  <dc:creator>adeiji</dc:creator>
  <guid isPermaLink="false">http://intertherabbithole.files.wordpress.com/2014/03/mom-cat-balancing-act.jpeg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>180</wp:post_id>
  <wp:post_date>2014-03-10 23:27:55</wp:post_date>
  <wp:post_date_gmt>2014-03-10 23:27:55</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>mom-cat-balancing-act</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>179</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://intertherabbithole.files.wordpress.com/2014/03/mom-cat-balancing-act.jpeg</wp:attachment_url>
</item>
  </channel>
</rss>
